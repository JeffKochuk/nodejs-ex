{"version":3,"sources":["meteor://ðŸ’»app/imports/helpers/mysql.js","meteor://ðŸ’»app/imports/helpers/stats.js","meteor://ðŸ’»app/imports/collections.js","meteor://ðŸ’»app/server/getEloquaData.js","meteor://ðŸ’»app/server/segmentBuilderMethods.js","meteor://ðŸ’»app/server/segmentBuilderMethodsV3.js","meteor://ðŸ’»app/server/main.js","meteor://ðŸ’»app/testEloquaRest.js"],"names":["module","export","getConnection","getQueryPromise","mysql","import","v","connection","createConnection","JSON","parse","process","env","MYSQL_OBJECT","connect","qString","Promise","resolve","reject","query","err","data","accumulateStats","mysqlMap","eloquaMap","Map","set","mapsAvailable","eloqua","elements","source","stats","Error","mapToUse","total","forEach","val","el","statAccumulatorName","eloquaFieldName","replace","count","Segments","EloquaLogs","Logs","Stats","SqlCache","Mongo","Collection","getOneEloquaPage","getEloquaDataPromise","getEloquaDataResults","SEGMENTS_URL","CONTACTS_URL","LEIA_VIEW_URL","fetch","EloquaOptions","headers","authorization","AUTHORIZATION","id","page","Meteor","url","then","res","json","applyToEach","console","log","body","numPagesToGet","parseInt","pageSize","insert","date","Date","pagesArray","i","push","all","await","retArray","newElements","row","concat","startup","methods","getDefaultStats","defaultStats","findOne","DEFAULT_STATS","getStats","filters","thisWeek","setDate","getDate","existingStats","find","$gt","length","heyLookAnotherStatsMethodTakesInFiltersOutputsStatsBlock","setTimeout","upsert","sqlQuery","sqlBase","getWhereClause","statsReturn","statsBlock","getStatsFromSQLResponse","DBNameMap","where","Object","keys","filter","k","map","thisArr","join","SQLRes","thisRes","contactCount","companyCount","companies","Persona","Industry","Programs","updateSegmentList","Restivus","insertSegments","bindEnvironment","obj","_id","$set","name","_ensureIndex","updateSegmentsEveryMorning","Cron","minute","hour","getSegmentStatsByName","type","input","records","segment","call","getSegmentStats","firstPage","N","Math","ceil","promArray","lastRefreshed","dataSample","slice","first","C_FirstName","last","C_LastName","email","C_EmailAddress","update","RESTAPI","apiPath","defaultHeaders","prettyJson","addRoute","post","request","statusCode","get","startDate","days","urlParams","setHours","setMinutes","setSeconds","$gte","doc","reduce","a","b","addCollection","excludedEndpoints","oneDay","sevenDays","fourteenDays","thirtyDays","threeSixtyFiveDays","REDUCE_SUM","lastDay","lastWeek","lastTwoWeeks","lastMonth","lastYear","contactsFound","uses"],"mappings":"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","file":"/app.js","sourcesContent":["import mysql from \"mysql\";\n\nexport const getConnection = () => {\n    // const connection = mysql.createConnection({\n    //     host     : \"584099dfecdd5c15db000029-marketing.itos.redhat.com\",\n    //     port     : 54816,\n    //     user     : \"adminYeMvBUb\",\n    //     password : \"nVNdcJBDaazL\",\n    //     database : \"workflows1\",\n    //     multipleStatements: \"true\"\n    // });\n    const connection = mysql.createConnection(JSON.parse(process.env.MYSQL_OBJECT));\n    connection.connect();\n    return connection;\n};\n\nexport const getQueryPromise = () => {\n    const connection = getConnection();\n    return (qString) => {\n        return new Promise((resolve, reject) => {\n            connection.query(qString, (err, data) => {\n                if (err) return reject(err);\n                resolve(data);\n            })\n        })\n    };\n};\n\n\n","/**\n * Created by jkochuk on 10/5/16.\n */\nconst eloquaMap = new Map()\n    .set(\"C_Lead_Rating___Combined1\", 'Lead Rating')\n    .set(\"C_Lead_Ranking1\", 'Lead Ranking')\n    .set(\"C_Company\", 'Company')\n    .set(\"C_Company_Size11\", 'Company Size')\n    .set(\"C_Derived__Persona1\", 'Persona')\n    .set(\"C_Industry1\", 'Industry')\n    .set(\"C_Derived_Language_Preference1\", 'Language')\n    .set(\"C_Country\", 'Country');\n\nconst mysqlMap = new Map()\n    .set(\"MLSMScore\", 'Lead Rating')\n    .set(\"MLSMRank\", 'Lead Ranking')\n    .set(\"Company\", 'Company')\n    .set(\"Size\", 'Company Size')\n    .set(\"Persona\", 'Persona')\n    .set(\"Industry\", 'Industry')\n    .set(\"Language\", 'Language')\n    .set(\"Country\", 'Country');\n\nconst mapsAvailable = {\n    eloqua: eloquaMap,\n    mysql: mysqlMap\n};\n\n\n// Function accumulateStats takes an eloqua response's ELEMENTS field and counts the occurances for each value.\n// Also can take the result of a mysql query and handle it the same way\nconst accumulateStats = (elements, source, stats) => {\n    if (source !== 'mysql' && source !== 'eloqua') {\n        throw new Error('accumulateStats called without specifying the source');\n    }\n    const mapToUse = mapsAvailable[source];\n    \n    // Initialize our array if nothing was passed\n    if (!stats) {\n        stats = { total: 0 };\n        mapToUse.forEach((val) => stats[val]={});\n    }\n    // Make sure we hve a total field available in stats;\n    if (!stats.total) {\n        stats.total = 0;\n    }\n    // Accumulate values of statsMap into stats;\n    for (const el of elements) {\n        mapToUse.forEach((statAccumulatorName, eloquaFieldName) => {\n            // Mongo will be sad if we don't escape . and $ with alternate characters\n            if(el[eloquaFieldName]){\n                el[eloquaFieldName] = el[eloquaFieldName].replace(/\\./g, '\\uff0e').replace(/\\$/g, '\\uff04');\n            }\n            // Set or increment the stats, where 'VAL' is the stat name and 'el[key]' is the stat value\n            stats[statAccumulatorName][el[eloquaFieldName]] = ( stats[statAccumulatorName][el[eloquaFieldName]] + (el.count || 1) ) || (el.count || 1);\n        });\n        stats.total += (el.count || 1);\n    }\n    return stats;\n};\n\nexport { accumulateStats, mysqlMap }","import { Mongo } from 'meteor/mongo';\n\nexport const Segments = new Mongo.Collection('segments');\nexport const EloquaLogs = new Mongo.Collection('eloquaLogs');\nexport const Logs = new Mongo.Collection('logs');\nexport const Stats = new Mongo.Collection('statCache');\nexport const SqlCache = new Mongo.Collection('sqlCache');\n\n","import fetch from 'node-fetch';\nimport { EloquaLogs } from '../imports/collections.js';\nconst EloquaOptions = {\n  headers: {\n    authorization: process.env.AUTHORIZATION,\n  },\n};\n\nexport const getOneEloquaPage = function(id, page = 1) {\n    if(!id) throw new Meteor.Error(`id: ${id} is not valid`);\n    const url = `${LEIA_VIEW_URL}/${id}?page=${page}`;\n    return fetch(url,EloquaOptions)\n        .then(res => res.json());\n};\n\n// Take an Eloqua URI and a function. Applies the function to the body of each page. Use this one to insert values  \nexport const getEloquaDataPromise = (url, applyToEach) => {\n  console.log(`Getting URL Promise: ${url}`);\n  return fetch(url, EloquaOptions)\n    .then((res) => res.json())\n    .then((body) => {\n      console.log(body.total + 'elements in query');\n      const numPagesToGet = parseInt(body.total, 10) / parseInt(body.pageSize, 10);\n      EloquaLogs.insert({ url, numPagesToGet, date: new Date() });\n      const pagesArray = [];\n      applyToEach(body);\n      if (numPagesToGet > 1) {\n        for (let i = 1; i < numPagesToGet; i++) {\n          pagesArray.push(\n            fetch(`${url}?page=${i + 1}`, EloquaOptions)\n              .then(res => res.json())\n              .then(applyToEach)\n          );\n        }\n        Promise.all(pagesArray).await();\n      }\n      return body.total;\n    });\n};\n\n// Get eloqua data and return all data as an array\nexport const getEloquaDataResults = (url) => {\n  console.log(`Getting URL Promise: ${url}`);\n  return fetch(url, EloquaOptions)\n    .then((res) => res.json())\n    .then((body) => {\n      console.log(body.total + 'elements in query');\n      const numPagesToGet = parseInt(body.total, 10) / parseInt(body.pageSize, 10);\n      EloquaLogs.insert({ url, numPagesToGet, date: new Date() });\n      let pagesArray = [];\n      let retArray = body.elements;\n      if (numPagesToGet > 1) {\n        for (let i = 1; i < numPagesToGet; i++) {\n          pagesArray.push(\n            fetch(`${url}?page=${i + 1}`, EloquaOptions)\n              .then(res => res.json())\n              .then(json => json.elements)\n          );\n        }\n        const newElements = Promise.all(pagesArray).await();\n        for (let row of newElements) {\n          retArray = retArray.concat(row);\n        }\n      }\n\n      return retArray;\n    });\n};\n\n// NO ID NEEDED for Segments_url\nexport const SEGMENTS_URL = 'https://secure.p01.eloqua.com/Api/rest/2.0/assets/contact/segments';\n// MAKE SURE to add a ID to CONTACTS_URL\n// https://secure.p01.eloqua.com/API/REST/2.0/data/contact/view/100081/contacts/segment/943\nexport const CONTACTS_URL = 'https://secure.p01.eloqua.com/API/REST/2.0/data/contact/view/100081/contacts/segment';\n\nexport const LEIA_VIEW_URL = 'https://secure.p01.eloqua.com/API/REST/2.0/data/contact/view/100190/contacts/segment';\n\n\n\n","// /**\n//  * Created by jkochuk on 10/3/16.\n//  */\n//\n// import { Meteor } from 'meteor/meteor';\n// import { getConnection, getQueryPromise } from '../imports/helpers/mysql.js';\n// import promisify  from 'es6-promisify';\n// import { accumulateStats, mysqlMap } from '../imports/helpers/stats.js';\n// import fetch from 'node-fetch';\n// import sqlstring from 'sqlstring';\n//\n// // Data should look like this\n// // {\n// //      email: \"jkochuk@redhat.com\",\n// //      areasOfInterest: Array[2],\n// //      interestSource: Array[1],\n// //      activeUsers: false,\n// //      personas: Array[2],\n// //      completeness: true,\n// //      geography: \"\",\n// //      geographyRadius: \"\",\n// //      industry: Array[1]\n// // }\n// const statsFields = ['Language', 'Size', 'Industry', 'SuperRegion', 'Persona'];\n// const sparseStatsFields = ['Company', 'Country', 'MetroArea'];\n// const fullStatsFields = ['Persona', 'Language', 'Size', 'Industry', 'Company', 'Country', 'MLSMScore', 'MLSMRank'];\n//\n// Meteor.methods({\n//     getQuickStats(filters) {\n//         if (!(filters.Themes && filters.Themes.length)) {\n//             console.log('No Themes')\n//             console.log(filters);\n//             return { loading: false };\n//         }\n//         const query = getQueryPromise();\n//         // const qs = `SELECT COUNT(*) as count FROM (${themes.map(e => `SELECT emailAddress FROM ${e}`).join(' UNION DISTINCT ')}) a`;\n//         // const startTime = Date.now(); // @todo remove\n//         const { Themes, ...rest } = filters;\n//         const filtersWithCriteria = Object.keys(rest).filter(k=>rest[k].length);\n//         let qs = `SELECT ${statsFields}, COUNT(*) AS count FROM ${Themes[0]} a LEFT JOIN contacts b ON a.emailAddress = b.emailAddress WHERE ${filtersWithCriteria.length ? filtersWithCriteria.map(k=>`${k} IN (${rest[k].map(sqlstring.escape)})`).join(' AND ') : '1=1'} GROUP BY Language, Size, Industry, SuperRegion, Persona;`;\n//         console.log(qs);\n//         const res = query(qs).await();\n//         // const midTime = Date.now();// @todo remove\n//         let count = 0;\n//         const stats = { count: 0 };\n//         for (let n of statsFields) {\n//             stats[n]={};\n//         }\n//         for (let row of res) {\n//             const { count } = row;\n//             stats.count += count;\n//             for (let stat of statsFields) {\n//                 stats[stat][row[stat]] = (stats[stat][row[stat]] || 0) + count;\n//             }\n//         }\n//         // console.log('Count', stats.count); //@todo\n//         // console.log('Half Way', midTime - startTime);//@todo\n//         // console.log('Full time', Date.now() - startTime);//@todo\n//         return { stats }\n//     },\n//\n//     // @todo you can just put this as another instance of getStats\n//     getSparseStats(filters) {\n//         if (!(filters.Themes && filters.Themes.length)) {\n//             console.log('No Themes');\n//             console.log(filters);\n//             return { loading: false };\n//         }\n//         const query = getQueryPromise();\n//         // const qs = `SELECT COUNT(*) as count FROM (${themes.map(e => `SELECT emailAddress FROM ${e}`).join(' UNION DISTINCT ')}) a`;\n//         // const startTime = Date.now(); // @todo remove\n//         const { Themes, ...rest } = filters;\n//         const filtersWithCriteria = Object.keys(rest).filter(k=>rest[k].length);\n//         let qs = `SELECT ${sparseStatsFields}, COUNT(*) AS count FROM ${Themes[0]} a LEFT JOIN contacts b ON a.emailAddress = b.emailAddress WHERE ${filtersWithCriteria.length ? filtersWithCriteria.map(k=>`${k} IN (${rest[k].map(sqlstring.escape)})`).join(' AND ') : '1=1'} GROUP BY ${sparseStatsFields};`;\n//         console.log(qs);\n//         const res = query(qs).await();\n//         const sparseStats = {};\n//         for (let n of sparseStatsFields) {\n//             sparseStats[n]={};\n//         }\n//         for (let row of res) {\n//             const { count } = row;\n//             sparseStats.count += count;\n//             for (let stat of sparseStatsFields) {\n//                 sparseStats[stat][row[stat]] = (sparseStats[stat][row[stat]] || 0) + count;\n//             }\n//         }\n//         return { sparseStats }\n//     },\n//\n//     getFullStats(filters) {\n//         // const startTime = Date.now(); // @todo remove\n//         if (!(filters.Themes && filters.Themes.length)) {\n//             console.log('No Themes');\n//             console.log(filters);\n//             return { loading: false };\n//         }\n//         const { Themes, ...rest } = filters;\n//         const filtersWithCriteria = Object.keys(rest).filter(k=>rest[k].length); // Get keys of rest with values of non-empty arrays\n//         let qs = `SELECT ${fullStatsFields}, COUNT(*) AS count FROM ${Themes[0]} a LEFT JOIN contacts b ON a.emailAddress = b.emailAddress WHERE ${filtersWithCriteria.length ? filtersWithCriteria.map(k=>`${k} IN (${rest[k].map(sqlstring.escape)})`).join(' AND ') : '1=1'} GROUP BY ${fullStatsFields};`;\n//         const query = getQueryPromise();\n//         console.log(qs);\n//         const queryReturn = query(qs)\n//             .then((rows) => {\n//                 console.log(rows.length);\n//                 return rows;\n//             })\n//             .await();\n//         const fullStats = accumulateStats(queryReturn, 'mysql', null);\n//         console.log(fullStats.total);\n//         return {\n//             fullStats\n//         };\n//     },\n//\n//\n//     segmentBuilderBuildOriginalStats(formData) {\n//         let query = 'select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from contacts';\n//         let whereClauses = [];\n//         let isThereEnoughData = false;\n//         if (formData.engagement && formData.engagement.length) {\n//             whereClauses.push(`EngagementStatus IN ('${formData.engagement.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.personas.length) {\n//             whereClauses.push(`Persona IN ('${formData.personas.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.completeness && formData.completeness.length) {\n//             whereClauses.push(`CompletenessLevel IN ('${formData.completeness.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.industry.length) {\n//             whereClauses.push(`Industry IN ('${formData.industry.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.metro.length) {\n//             whereClauses.push(`MetroArea IN ('${formData.metro.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.theme.length) {\n//             query = \"select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from (SELECT distinct emailAddress from THEME_LINK where theme in ('\" + formData.theme.join('\\',\\'') + \"')) theme inner join contacts on theme.emailAddress = contacts.emailAddress \";\n//             isThereEnoughData = true;\n//         }\n//\n//         if (isThereEnoughData) {\n//             if (whereClauses.length) {\n//                 query = query + ' where ' + whereClauses.join(' AND ');\n//             }\n//             console.log(query);\n//             //@todo remove this LIMIT once you have indices in place\n//             query = query + ' LIMIT 10000';\n//             const connection = getConnection();\n//             const queryDB = promisify(connection.query, connection);\n//             const queryReturn = queryDB(query)\n//                 .then((rows) => {\n//                     console.log(rows.length);\n//                     return rows;\n//                 })\n//                 .await();\n//\n//             const stats = accumulateStats(queryReturn, 'mysql', null);\n//             // console.log(stats);\n//             const segment = {\n//                 stats,\n//                 total: queryReturn.length\n//             };\n//             // console.log(segment);\n//             return segment;\n//\n//         } else {\n//             throw new Meteor.Error('Need more details');\n//         }\n//     },\n//     testStatsMethod(formData) {\n//         const startTimeMethod1 = Date.now();\n//         let query = 'select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from contacts';\n//         let whereClauses = [];\n//         let isThereEnoughData = false;\n//         if (formData.engagement && formData.engagement.length) {\n//             whereClauses.push(`EngagementStatus IN ('${formData.engagement.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.personas.length) {\n//             whereClauses.push(`Persona IN ('${formData.personas.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.completeness && formData.completeness.length) {\n//             whereClauses.push(`CompletenessLevel IN ('${formData.completeness.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.industry.length) {\n//             whereClauses.push(`Industry IN ('${formData.industry.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.metro.length) {\n//             whereClauses.push(`MetroArea IN ('${formData.metro.join(\"','\")}')`);\n//             isThereEnoughData = true;\n//         }\n//         if (formData.theme.length) {\n//             query = \"select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from (SELECT distinct emailAddress from THEME_LINK where theme in ('\" + formData.theme.join('\\',\\'') + \"')) theme inner join contacts on theme.emailAddress = contacts.emailAddress \";\n//             isThereEnoughData = true;\n//         }\n//\n//         if (isThereEnoughData) {\n//             if (whereClauses.length) {\n//                 query = query + ' where ' + whereClauses.join(' AND ');\n//             }\n//             console.log(query);\n//             //@todo remove this LIMIT once you have indices in place\n//             // query = query + ' LIMIT 10000';\n//             const connection = getConnection();\n//             const queryDB = promisify(connection.query, connection);\n//             const queryReturn = queryDB(query)\n//                 .then((rows) => {\n//                     console.log(rows.length);\n//                     return rows;\n//                 })\n//                 .await();\n//\n//             const stats = accumulateStats(queryReturn, 'mysql', null);\n//             // console.log(stats);\n//             const segment = {\n//                 stats,\n//                 total: queryReturn.length\n//             };\n//             // console.log(segment);\n//             const endTimeMethod1 = Date.now();\n//             console.log('Time for stats method 1', endTimeMethod1 - startTimeMethod1, '::::', Math.ceil((endTimeMethod1 - startTimeMethod1) / 1000), 'sec')\n//             return segment;\n//\n//             // const startTimeMethod2 = Date.now();\n//             // const fromQuery = query.slice(query.indexOf('from'));\n//             // const countQueries = [];\n//             // mysqlMap.forEach((key, name) => countQueries.push(`SELECT ${name}, COUNT(*) as 'count' ${fromQuery} GROUP BY ${name}`));\n//             // console.log(countQueries);\n//             // const joinedQuery = countQueries.join('; ');\n//             // const stats2 = {};\n//             // queryDB(joinedQuery)\n//             //     .then((results) => {\n//             //         // console.log(stats);\n//             //         // console.log(results);\n//             //         //results is an array of [{word, count(*)},{}],[]\n//             //         results.forEach((entries) => {\n//             //             let thisSetOfStats = '';\n//             //             let thisDbName = '';\n//             //             entries.forEach((entry) => {\n//             //                 if (!thisSetOfStats) {\n//             //                     const thisEntryHolder = Object.keys(entry).filter((x) => x !== 'count');\n//             //                     if (thisEntryHolder.length) {\n//             //                         thisDbName = thisEntryHolder[0];\n//             //                         thisSetOfStats = mysqlMap.get(thisDbName);\n//             //                         stats2[thisSetOfStats] = {}\n//             //                     }\n//             //                 }\n//             //                 // Yeah this will be annoying to figure out so here's how it goes:\n//             //                 //\n//             //                 // Entries looks like this:\n//             //                 // [ { MLSMScore: 'B1', 'count': 70 },\n//             //                 // { MLSMScore: 'B2', 'count': 94 }, ... ]\n//             //                 //\n//             //                 // We want it to look like this:\n//             //                 // { MLSMScore: {\n//             //                 //      B1: 70,\n//             //                 //      B2: 94, ...\n//             //                 //    }\n//             //                 // }\n//             //                 stats2[thisSetOfStats][entry[thisDbName]] = entry.count;\n//             //             });\n//             //         });\n//             //     })\n//             //     .catch(console.log)\n//             //     .await();\n//             // //rankData, companies, map, etc...\n//             //\n//             //\n//             //\n//             // const endTimeMethod2 = Date.now();\n//             // console.log('Time for stats method 1', endTimeMethod2 - startTimeMethod2, '::::', Math.ceil((endTimeMethod2 - startTimeMethod2) / 1000), 'sec');\n//             //\n//             // // console.log(stats2);\n//             //\n//             //\n//             //\n//             //\n//             //\n//             // segment.stats = stats2;\n//             // return segment;\n//\n//         } else {\n//             throw new Meteor.Error('Need more details');\n//         }\n//     },\n//\n//\n//\n//     //@TODO IMPLEMENT EVENTUALLY\n//     segmentBuilderSaveToEloqua(formData){\n//         const placeToPostTo = 'https://secure.p01.eloqua.com/API/REST/2.0/assets/contact/segment';\n//         const thenQueue = 'https://secure.p01.eloqua.com/API/REST/2.0/assets/contact/segment/queue';\n//\n//         const criteria = [];\n//         if (formData.engagement && formData.engagement.length) {\n//             const criterion = {\n//                 \"type\": \"ContactFieldCriterion\",\n//                 \"id\": \"-1\",\n//                 \"condition\": {\n//                     \"type\": \"TextSetCondition\",\n//                     \"operator\": \"in\",\n//                     \"optionListId\": \"-1\",\n//                     \"quickListString\": formData.engagement.join(',')\n//                 },\n//                 \"fieldId\": \"100837\"\n//             };\n//             criteria.push(criterion)\n//         }\n//\n//         if (formData.personas && formData.personas.length) {\n//             const criterion = {\n//                 \"type\": \"ContactFieldCriterion\",\n//                 \"id\": \"-2\",\n//                 \"condition\": {\n//                     \"type\": \"TextSetCondition\",\n//                     \"operator\": \"in\",\n//                     \"optionListId\": \"-2\",\n//                     \"quickListString\": formData.personas.join(',')\n//                 },\n//                 \"fieldId\": \"100837\"\n//             };\n//             criteria.push(criterion)\n//         }\n//\n//         if (formData.completeness && formData.completeness.length) {\n//             const criterion = {\n//                 \"type\": \"ContactFieldCriterion\",\n//                 \"id\": \"-3\",\n//                 \"condition\": {\n//                     \"type\": \"TextSetCondition\",\n//                     \"operator\": \"in\",\n//                     \"optionListId\": \"-3\",\n//                     \"quickListString\": formData.completeness.join(',')\n//                 },\n//                 \"fieldId\": \"100811\"\n//             };\n//             criteria.push(criterion)\n//         }\n//\n//         if (formData.industry && formData.industry.length) {\n//             const criterion = {\n//                 \"type\": \"ContactFieldCriterion\",\n//                 \"id\": \"-4\",\n//                 \"condition\": {\n//                     \"type\": \"TextSetCondition\",\n//                     \"operator\": \"in\",\n//                     \"optionListId\": \"-4\",\n//                     \"quickListString\": formData.industry.join(',')\n//                 },\n//                 \"fieldId\": \"100046\"\n//             };\n//             criteria.push(criterion)\n//         }\n//\n//         if (formData.metro && formData.metro.length) {\n//             const criterion = {\n//                 \"type\": \"ContactFieldCriterion\",\n//                 \"id\": \"-5\",\n//                 \"condition\": {\n//                     \"type\": \"TextSetCondition\",\n//                     \"operator\": \"in\",\n//                     \"optionListId\": \"-5\",\n//                     \"quickListString\": formData.metro.join(',')\n//                 },\n//                 \"fieldId\": \"100818\"\n//             };\n//             criteria.push(criterion)\n//         }\n//\n//         if (formData.theme && formData.theme.length) {\n//             //@todo do theme here\n//             console.log(\"We don't *DO* theme here...\");\n//         }\n//\n//         const filter = {\n//             \"isIncluded\": \"true\",\n//             \"filter\": {\n//                 \"name\": \"Filter Criterion 1\",\n//                 \"scope\": \"local\",\n//                 \"id\": \"-111\",\n//                 \"createdBy\": \"2084\",\n//                 \"createdAt\": \"\" + new Date().valueOf() / 1000,\n//                 \"type\": \"ContactFilter\",\n//                 \"criteria\": criteria,\n//                 \"statement\": criteria.map((c) => c.id).join(' AND '),\n//                 \"x_e10_isTemplate\": \"false\",\n//                 \"permissions\": [\n//                     \"Retrieve\",\n//                     \"Update\",\n//                     \"Delete\",\n//                     \"SetSecurity\"\n//                 ]\n//             },\n//             \"id\": \"-112\",\n//             \"type\": \"ContactFilterSegmentElement\"\n//         };\n//\n//         const template = {\n//             \"createdBy\": \"2084\",\n//             \"createdAt\": \"1476197319\",\n//             // \"updatedBy\": \"2084\",\n//             // \"updatedAt\": \"1476197319\",\n//             \"currentStatus\": \"Draft\",\n//             \"type\": \"ContactSegment\",\n//             \"elements\": [\n//                 filter\n//             ],\n//             \"isBlankTemplate\": true,\n//             \"id\": \"-211\",\n//             \"name\": `TESTTEST: ${formData.name}`,\n//             \"permissions\": [\n//                 \"Retrieve\",\n//                 \"Update\",\n//                 \"Delete\",\n//                 \"SetSecurity\"\n//             ],\n//             \"folderId\": \"180344\",\n//             \"x_e10_isTemplate\": \"false\",\n//             \"depth\": \"complete\"\n//         };\n//         console.log(JSON.stringify(template));\n//\n//         fetch(placeToPostTo, { method: 'POST', body: JSON.stringify(template), headers: { authorization: process.env.AUTHORIZATION, \"Content-Type\": \"application/json\" } })\n//             .then((res) => res.json())\n//             .then((json) => {\n//                 console.log('***** First Half *****');\n//                 console.log(json);\n//                 return fetch(`${thenQueue}/${json.id}`, { method: 'POST', headers: { authorization: process.env.AUTHORIZATION, \"Content-Type\": \"application/json\" } })\n//             })\n//             .then((res) => res.json())\n//             .then((json) => {\n//                 console.log('***** QUEUE RES *****');\n//                 console.log(json);\n//             })\n//             .await();\n//         console.log('DONE!');\n//\n//\n//     }\n// });\n//\n//\n// // const thisOneWorked = {\n// //     \"createdBy\": \"2084\",\n// //     \"createdAt\": \"1476197319\",\n// //     \"currentStatus\": \"Draft\",\n// //     \"type\": \"ContactSegment\",\n// //     \"elements\": [\n// //         {\n// //             \"isIncluded\": \"true\",\n// //             \"filter\": {\n// //                 \"name\": \"Filter Criteria 1\",\n// //                 \"scope\": \"local\",\n// //                 \"id\": \"-111\",\n// //                 \"createdBy\": \"2084\",\n// //                 \"createdAt\": \"1476197359\",\n// //                 \"type\": \"ContactFilter\",\n// //                 \"criteria\": [{\n// //                     \"type\": \"ContactFieldCriterion\",\n// //                     \"id\": \"-5\",\n// //                     \"condition\": {\n// //                         \"type\": \"TextSetCondition\",\n// //                         \"operator\": \"in\",\n// //                         \"optionListId\": \"-5\",\n// //                         \"quickListString\": \"High,Medium\"\n// //                     },\n// //                     \"fieldId\": \"100811\"\n// //                 }],\n// //                 \"statement\": \"-5\",\n// //                 \"x_e10_isTemplate\": \"false\",\n// //                 \"permissions\": [\n// //                     \"Retrieve\",\n// //                     \"Update\",\n// //                     \"Delete\",\n// //                     \"SetSecurity\"\n// //                 ]\n// //             },\n// //             \"id\": \"-112\",\n// //             \"type\": \"ContactFilterSegmentElement\"\n// //         }\n// //     ],\n// //     \"isBlankTemplate\": true,\n// //     \"id\": \"-211\",\n// //     \"name\": \"TEST REST 123123\",\n// //     \"permissions\": [\n// //         \"Retrieve\",\n// //         \"Update\",\n// //         \"Delete\",\n// //         \"SetSecurity\"\n// //     ],\n// //     \"folderId\": \"180344\",\n// //     \"x_e10_isTemplate\": \"false\",\n// //     \"depth\": \"complete\"\n// // };\n//\n//\n// var x = {\n//     \"createdBy\": \"2084\",\n//     \"createdAt\": \"1476197319\",\n//     \"currentStatus\": \"Draft\",\n//     \"type\": \"ContactSegment\",\n//     \"elements\": [{\n//         \"isIncluded\": \"true\",\n//         \"filter\": {\n//             \"name\": \"Filter Criterion 1\",\n//             \"scope\": \"local\",\n//             \"id\": \"-111\",\n//             \"createdBy\": \"2084\",\n//             \"createdAt\": \"1479321218.145\",\n//             \"type\": \"ContactFilter\",\n//             \"criteria\": [{\n//                 \"type\": \"ContactFieldCriterion\",\n//                 \"id\": \"-4\",\n//                 \"condition\": {\n//                     \"type\": \"TextSetCondition\",\n//                     \"operator\": \"in\",\n//                     \"optionListId\": \"-4\",\n//                     \"quickListString\": \"Finance,Telecommunications\"\n//                 },\n//                 \"fieldId\": \"100046\"\n//             }],\n//             \"statement\": \"-4\",\n//             \"x_e10_isTemplate\": \"false\",\n//             \"permissions\": [\"Retrieve\", \"Update\", \"Delete\", \"SetSecurity\"]\n//         },\n//         \"id\": \"-112\",\n//         \"type\": \"ContactFilterSegmentElement\"\n//     }],\n//     \"isBlankTemplate\": true,\n//     \"id\": \"-211\",\n//     \"name\": \"TEST: Leia Created 1479321218138\",\n//     \"permissions\": [\"Retrieve\", \"Update\", \"Delete\", \"SetSecurity\"],\n//     \"folderId\": \"180344\",\n//     \"x_e10_isTemplate\": \"false\",\n//     \"depth\": \"complete\"\n// }\n","/**\n * Created by jkochuk on 2/16/17.\n */\n\nimport {Meteor} from 'meteor/meteor';\nimport {Stats, SqlCache} from '../imports/collections.js';\n// import sqlstring from 'sqlstring';\nimport {getQueryPromise} from '../imports/helpers/mysql.js';\n\nMeteor.startup(() => {\n    // Meteor.call('getStats', { Segments: [], SuperRegions: [], Persona: [], Industry: [], CompanySize: [], EngagementStatus: [], InstalledTechnologies: [] }, (stats) => {\n    //     Stats.upsert({ default: true }, {\n    //         default: true,\n    //         date: new Date(),\n    //         stats,\n    //     });\n    //     console.log(stats);\n    // });\n});\n\nMeteor.methods({\n    // Called when the page is first loaded.\n    getDefaultStats: () => {\n        const defaultStats = Stats.findOne({ default: true });\n        if (defaultStats) {\n            return defaultStats;\n        }\n        console.log('OH NO! NO DEFAULT STATS');\n        return DEFAULT_STATS;\n    },\n\n    // Given an object of filters, get counts for all of the elements NOT filtered\n    //\n    // @param filters Object with shape {\n    //      filter1: [],\n    //      filter2: [].\n    //      ...\n    // }\n    // @return Object with shape {\n    //      Area1: {\n    //          Element1: 123,\n    //          Element2: 234,\n    //          ...\n    //      },\n    //      Area2: {\n    //          Element3: 345,\n    //          Element4: 456,\n    //          ...\n    //      },\n    //      ...\n    // }\n    getStats: (filters) => {\n\n        // See if we have stats logged for the given filters and return them if we do\n        const thisWeek = new Date();// Current Date\n        thisWeek.setDate(thisWeek.getDate() - 7);\n        const existingStats = Stats.find({ date: { $gt: thisWeek }, ...filters }).fetch();\n        if (existingStats.length) {\n            console.log('Found existing stats');\n            return existingStats[0].stats;\n        }\n\n        // Make the SQL Query to get the required stats\n        const stats = heyLookAnotherStatsMethodTakesInFiltersOutputsStatsBlock(filters);\n\n        //Insert the document into the Mongo Cache AFTER we return it to the\n        Meteor.setTimeout(() => {\n            Stats.upsert({ ...filters }, {\n                date: new Date(),\n                stats,\n                ...filters\n            });\n        }, 0);\n        return stats;\n    }\n});\n\n\n// // Given an object which is a SQL response, turn it into a stats Object\n// //\n// // @param filters Object with shape {\n// //      element1: 123,\n// //      element2: 234,\n// //      element3: 345,\n// //      ...\n// //  }\n// // @return Object with shape {\n// //      Area1: {\n// //          Element1: 123,\n// //          Element2: 234,\n// //          ...\n// //      },\n// //      Area2: {\n// //          Element3: 345,\n// //          Element4: 456,\n// //          ...\n// //      },\n// //      ...\n// // }\n// const turnSQLIntoStatsBlock = (SQLRes) => {\n//     const statsBlock = {};\n//     Object.keys(SQLRes).forEach((k) => {\n//         if (!statsBlock[reverseLookupMap[k]]) {\n//             statsBlock[reverseLookupMap[k]] = {};\n//         }\n//         statsBlock[reverseLookupMap[k]][k] = SQLRes[k];\n//     });\n//     statsBlock.companyCount = SQLRes.companyCount;\n//     statsBlock.contactCount = SQLRes.contactCount;\n//     return statsBlock;\n// };\n// const reverseLookupMap = {\n//     contactCount: 'contactCount',\n//     companyCount: 'companyCount',\n//     Efficiency: 'Segments',\n//     Transitional: 'Segments',\n//     Training: 'Segments',\n//     Agility: 'Segments',\n//     Accelerate: 'Segments',\n//     Integrate: 'Segments',\n//     NA: 'SuperRegions',\n//     APAC: 'SuperRegions',\n//     EMEA: 'SuperRegions',\n//     LATAM: 'SuperRegions',\n//     ITManager: 'Persona',\n//     LeadDeveloper: 'Persona',\n//     ITExecutive: 'Persona',\n//     BusinessAnalyst: 'Persona',\n//     SystemAdministrator: 'Persona',\n//     Architect: 'Persona',\n//     Finance: 'Industry',\n//     Manufacturing: 'Industry',\n//     Telecommunications: 'Industry',\n//     MediaAndInternet: 'Industry',\n//     Healthcare: 'Industry',\n//     Education: 'Industry',\n//     Government: 'Industry',\n//     Enterprise: 'CompanySize',\n//     SmallBusiness: 'CompanySize',\n//     MidMarketEnterprise: 'CompanySize',\n//     MediumBusiness: 'CompanySize',\n//     Inactive: 'EngagementStatus',\n//     MostActive: 'EngagementStatus',\n//     Lapsed: 'EngagementStatus',\n//     Lapsing: 'EngagementStatus',\n//     Invalid: 'EngagementStatus',\n//     RHEL: 'InstalledTechnologies',\n//     Red_Hat_Satellite: 'InstalledTechnologies',\n//     Enterprise_Application_Platform: 'InstalledTechnologies',\n//     RHEV: 'InstalledTechnologies',\n//     OpenStack: 'InstalledTechnologies',\n//     CloudForms: 'InstalledTechnologies'\n// };\n//\n//\n// // Given an object of filters, build a SQL Query\n// //\n// // @param filters Object with shape {\n// //      filter1: [],\n// //      filter2: [].\n// //      ...\n// //  }\n// // @return String SQL Query to get counts\n// const turnFiltersIntoStatsBlock = (filters) => {\n//     //@TODO cache SQLQuery\n//     const thingsToCount = [];\n//     const namesOfThingsToCount = [];\n//     const whereClauses = [];\n//     const tempTableName = `leia_tmp_${Date.now()}`;\n//     sectionsToCount.forEach((val) => {\n//         if (filters[val] && filters[val].length) {\n//             whereClauses.push(WHERE_STRING_FUNCTIONS[val](filters[val]))\n//         } else {\n//             namesOfThingsToCount.push(val);\n//             thingsToCount.push(STATS_COUNT_STRINGS[val](tempTableName));\n//         }\n//     });\n//     if (filters.Companies && filters.Companies.length) {\n//         whereClauses.push(WHERE_STRING_FUNCTIONS.Companies(filters.Companies))\n//     }\n//     const sql = `CREATE TEMPORARY TABLE ${tempTableName} AS (SELECT * FROM temp_contacts WHERE ${whereClauses.join(' AND ') || '1=1'}); ${thingsToCount.join('; ')}`;\n//     console.log(sql);\n//     const query = getQueryPromise();\n//     const res = query(sql).await();\n//     console.log(res);\n//     // const res = MOCK_RES;\n//     return turnResesIntoStatsBlock(res, namesOfThingsToCount);\n// };\n//\n//\n// // Looks like [\n// //                 [\n// //                    { Size: mid, Count: 123 },\n// //                      {Size: large, Count: 123 }\n// //                 ],\n// const turnResesIntoStatsBlock = (res, namesOfThingsToCount) => {\n//     const statsBlock = {};\n//     for (let i = 0; i < namesOfThingsToCount.length; i++) {\n//         const thisRes = res[i + 2];\n//         const name = namesOfThingsToCount[i];\n//         statsBlock[name] = STATS_BUILDING_FUNCTIONS[name](thisRes, name);\n//     }\n//     statsBlock.companyCount = statsBlock.Count.companyCount;\n//     statsBlock.contactCount = statsBlock.Count.contactCount;\n//     const CompaniesRes = res[1];\n//     console.log('CompaniesRes', CompaniesRes);\n//     statsBlock.Companies = STATS_BUILDING_FUNCTIONS.Companies(CompaniesRes);\n//     console.log('******');\n//     console.log(statsBlock);\n//     return statsBlock;\n// };\n//\n// const alreadyGood = res => res[0];\n// const getNamedRes = (res, name) => {\n//     // CompanySize has a database name of 'Size'\n//     // @todo separate display names and database names\n//     const thisName = name == 'CompanySize' ? 'Size' : name;\n//     const returnObject = {};\n//     console.log(res);\n//     res.forEach(row => {\n//         const thisRowVal = row[thisName];\n//         console.log(thisRowVal);\n//         const namedVal = DBtoNameMap[name][thisRowVal] || console.log('Could Not Get Value for', name, thisRowVal);\n//         console.log(namedVal);\n//         returnObject[namedVal] = row.Count;\n//     });\n//     return returnObject;\n// };\n// //\n// // [{Company: c}, ...\n// const buildCompanies = (res) => res.map(holder => holder.Company);\n// const STATS_BUILDING_FUNCTIONS = {\n//     Count: alreadyGood,\n//     Segments: alreadyGood,\n//     Companies: buildCompanies,\n//     InstalledTechnologies: alreadyGood,\n//     SuperRegions: getNamedRes,\n//     Persona: getNamedRes,\n//     Industry: getNamedRes,\n//     CompanySize: getNamedRes,\n//     EngagementStatus: getNamedRes\n// };\n//\n// const sectionsToCount = ['Count', 'Segments', 'InstalledTechnologies', 'SuperRegions', 'Persona', 'Industry', 'CompanySize', 'EngagementStatus'];\n// const STATS_COUNT_STRINGS = {\n//     Count: (tmp) => `SELECT Company, Count(*) as c FROM ${tmp} GROUP BY Company ORDER BY c DESC LIMIT 10; SELECT COUNT(*) as contactCount, COUNT(DISTINCT Company) as companyCount FROM ${tmp}`,\n//     Segments: (tmp) => `SELECT COUNT(ITWOB_Efficiency=TRUE) AS Efficiency, COUNT(ITWOB_Transitional=TRUE) AS Transitional, COUNT(ITWOB_Agility=TRUE) AS Agility, COUNT(Training=TRUE) AS Training, COUNT(ModAppDev_Accelerate=TRUE) AS Accelerate, COUNT(ModAppDev_Integrate=TRUE) AS Integrate FROM ${tmp}`,\n//     InstalledTechnologies: (tmp) => `SELECT COUNT(RHEL=TRUE) AS RHEL, COUNT(Red_Hat_Satellite=TRUE) AS Red_Hat_Satellite, COUNT(Enterprise_Application_Platform=TRUE) AS Enterprise_Application_Platform, COUNT(RHEV=TRUE) AS RHEV, COUNT(OpenStack=TRUE) AS OpenStack, COUNT(CloudForms=TRUE) AS CloudForms FROM ${tmp}`,\n//     SuperRegions: (tmp) => `SELECT COUNT(*) AS Count, SuperRegion AS SuperRegions FROM ${tmp} GROUP BY SuperRegions`,\n//     Persona: (tmp) => `SELECT COUNT(*) AS Count, Persona FROM ${tmp} GROUP BY Persona`,\n//     Industry: (tmp) => `SELECT COUNT(*) AS Count, Industry FROM ${tmp} GROUP BY Industry`,\n//     CompanySize: (tmp) => `SELECT COUNT(*) AS Count, Size FROM ${tmp} GROUP BY Size`,\n//     EngagementStatus: (tmp) => `SELECT COUNT(*) AS Count, EngagementStatus FROM ${tmp} GROUP BY EngagementStatus`\n// };\n// const WHERE_STRING_FUNCTIONS = {\n//     Companies: (arr) => `Company IN (${arr.map(sqlstring.escape).join(',')})`,\n//     Segments: (arr) => ` (${arr.map(val => `${THEME_MAP[val]}=TRUE`).join(' OR ')}) `,\n//     SuperRegions: (arr) => `SuperRegion IN (${arr.map(val => NameToDBMap['SuperRegions'][val]).join(',')})`,\n//     Persona: (arr) => `Persona IN (${arr.map(val => NameToDBMap['Persona'][val]).join(',')})`,\n//     Industry: (arr) => `Industry IN (${arr.map(val => NameToDBMap['Industry'][val]).join(',')})`,\n//     CompanySize: (arr) => `Size IN (${arr.map(val => NameToDBMap['CompanySize'][val]).join(',')})`,\n//     EngagementStatus: (arr) => `EngagementStatus IN (${arr.map(val => NameToDBMap['EngagementStatus'][val]).join(',')})`,\n//     InstalledTechnologies: (arr) => ` (${arr.map(val => `${val}=TRUE`).join(' OR ')}) `\n// };\n// const THEME_MAP = {\n//     Agility: 'ITWOB_Agility',\n//     Efficiency: 'ITWOB_Efficiency',\n//     Transitional: 'ITWOB_Transitional'\n// };\n//\n// const DBtoNameMap = {\n//     SuperRegions: {\n//         1: 'NA',\n//         2: 'LATAM',\n//         3: 'EMEA',\n//         4: 'APAC'\n//     },\n//     Persona: {\n//         1: 'IT Manager',\n//         2: 'Other',\n//         3: 'Lead Developer',\n//         4: 'IT Executive',\n//         5: 'Business Analyst',\n//         6: 'System Administrator',\n//         7: 'Architect',\n//         8: 'IT Decision Maker'\n//     },\n//     Industry: {\n//         20: \"Business Services\",\n//         21: \"Manufacturing\",\n//         22: \"Finance\",\n//         23: \"Telecommunications\",\n//         24: \"Media & Internet\",\n//         25: \"Retail\",\n//         26: \"Other\",\n//         27: \"Software\",\n//         28: \"Healthcare \",\n//         29: \"Education\",\n//         30: \"Government\",\n//         31: \"Energy, Raw Materials & Utilities\",\n//         32: \"Construction & Real Estate\",\n//         33: \"Transportation\",\n//         34: \"Leisure & Hospitality\",\n//         35: \"Non-Profit & Professional Orgs.\",\n//         36: \"Agriculture \",\n//         37: \"Libraries\",\n//         38: \"Wholesale Trade\"\n//\n//     },\n//     CompanySize: {\n//         1: \"Enterprise\",\n//         2: \"Mid-Market Enterprise\",\n//         3: \"Medium Business\",\n//         4: \"Small Business\"\n//     },\n//     EngagementStatus: {\n//         1: \"Inactive\",\n//         2: \"Lapsed\",\n//         3: \"Most Active\",\n//         4: \"Lapsing\",\n//         5: \"Invalid\",\n//         6: \"Internal\"\n//     }\n// };\n// const NameToDBMap = {\n//     SuperRegions: {\n//         'NA': 1,\n//         'LATAM': 2,\n//         'EMEA': 3,\n//         'APAC': 4\n//     },\n//     Persona: {\n//         'IT Manager': 1,\n//         'Other': 2,\n//         'Lead Developer': 3,\n//         'IT Executive': 4,\n//         'Business Analyst': 5,\n//         'System Administrator': 6,\n//         'Architect': 7,\n//         'IT Decision Maker': 8\n//     },\n//     Industry: {\n//         \"Business Services\": 20,\n//         \"Manufacturing\": 21,\n//         \"Finance\": 22,\n//         \"Telecommunications\": 23,\n//         \"Media & Internet\": 24,\n//         \"Retail\": 25,\n//         \"Other\": 26,\n//         \"Software\": 27,\n//         \"Healthcare \": 28,\n//         \"Education\": 29,\n//         \"Government\": 30,\n//         \"Energy, Raw Materials & Utilities\": 31,\n//         \"Construction & Real Estate\": 32,\n//         \"Transportation\": 33,\n//         \"Leisure & Hospitality\": 34,\n//         \"Non-Profit & Professional Orgs.\": 35,\n//         \"Agriculture \": 36,\n//         \"Libraries\": 37,\n//         \"Wholesale Trade\": 38\n//\n//     },\n//     CompanySize: {\n//         \"Enterprise\": 1,\n//         \"Mid-Market Enterprise\": 2,\n//         \"Medium Business\": 3,\n//         \"Small Business\": 4\n//     },\n//     EngagementStatus: {\n//         \"Inactive\": 1,\n//         \"Lapsed\": 2,\n//         \"Most Active\": 3,\n//         \"Lapsing\": 4,\n//         \"Invalid\": 5,\n//         \"Internal\": 6\n//     }\n// };\n//\n// const MOCK_RES = [\n//     {\n//         fieldCount: 0,\n//         affectedRows: 1321579,\n//         insertId: 0,\n//         serverStatus: 2058,\n//         warningCount: 0,\n//         message: ',Records: 1321579  Duplicates: 0  Warnings: 0',\n//         protocol41: true,\n//         changedRows: 0\n//     },\n//     [{ Company: 'ABC' }, { Company: 'BGK' }],\n//     [{ contactCount: 1321579, companyCount: 200225 }],\n//     [{\n//         Efficiency: 0,\n//         Transitional: 0,\n//         Agility: 0,\n//         Training: 0,\n//         Accelerate: 0,\n//         Integrate: 0\n//     }],\n//     [{\n//         RHEL: 286050,\n//         Red_Hat_Satellite: 166385,\n//         Enterprise_Application_Platform: 95007,\n//         RHEV: 30178,\n//         OpenStack: 13993,\n//         CloudForms: 7997\n//     }],\n//     [{ Count: 435755, Persona: null },\n//         { Count: 218459, Persona: 1 },\n//         { Count: 225690, Persona: 2 },\n//         { Count: 167705, Persona: 3 },\n//         { Count: 100141, Persona: 4 },\n//         { Count: 74040, Persona: 5 },\n//         { Count: 52140, Persona: 6 },\n//         { Count: 47648, Persona: 7 },\n//         { Count: 1, Persona: 8 }],\n//     [{ Count: 321192, Industry: null },\n//         { Count: 151694, Industry: 20 },\n//         { Count: 151833, Industry: 21 },\n//         { Count: 144385, Industry: 22 },\n//         { Count: 81059, Industry: 23 },\n//         { Count: 40943, Industry: 24 },\n//         { Count: 88061, Industry: 25 },\n//         { Count: 49000, Industry: 26 },\n//         { Count: 52760, Industry: 27 },\n//         { Count: 53939, Industry: 28 },\n//         { Count: 49375, Industry: 29 },\n//         { Count: 48084, Industry: 30 },\n//         { Count: 31314, Industry: 31 },\n//         { Count: 21407, Industry: 32 },\n//         { Count: 14549, Industry: 33 },\n//         { Count: 11489, Industry: 34 },\n//         { Count: 9527, Industry: 35 },\n//         { Count: 34, Industry: 36 },\n//         { Count: 927, Industry: 37 },\n//         { Count: 7, Industry: 38 }],\n//     [{ Count: 547910, Size: null },\n//         { Count: 409722, Size: 1 },\n//         { Count: 98793, Size: 2 },\n//         { Count: 73237, Size: 3 },\n//         { Count: 191917, Size: 4 }],\n//     [{ Count: 839, EngagementStatus: null },\n//         { Count: 822290, EngagementStatus: 1 },\n//         { Count: 180192, EngagementStatus: 2 },\n//         { Count: 171555, EngagementStatus: 3 },\n//         { Count: 101214, EngagementStatus: 4 },\n//         { Count: 39553, EngagementStatus: 5 },\n//         { Count: 5936, EngagementStatus: 6 }]];\n// const DEFAULT_STATS = {\n//     default: true,\n//     date: new Date(),\n//     Count: { contactCount: 3768820, companyCount: 736823 },\n//     Segments: {\n//         Efficiency: 66101,\n//         Transitional: 15472,\n//         Agility: 52780,\n//         Training: 34510,\n//         Accelerate: 54380,\n//         Integrate: 24378\n//     },\n//     InstalledTechnologies: {\n//         RHEL: 540110,\n//         Red_Hat_Satellite: 212792,\n//         Enterprise_Application_Platform: 133732,\n//         RHEV: 53146,\n//         OpenStack: 39084,\n//         CloudForms: 10691\n//     },\n//     SuperRegions: { undefined: 8 },\n//     Persona: {\n//         Architect: 85306,\n//         'Business Analyst': 136761,\n//         'IT Executive': 177567,\n//         'IT Manager': 415808,\n//         'Lead Developer': 342292,\n//         Other: 395879,\n//         'System Administrator': 124904,\n//     },\n//     Industry: {\n//         Education: 67665,\n//         Finance: 187859,\n//         Government: 66187,\n//         'Healthcare ': 87858,\n//         Manufacturing: 200724,\n//         'Media & Internet': 150135,\n//     },\n//     CompanySize: {\n//         Enterprise: 528010,\n//         'Medium Business': 121449,\n//         'Mid-Market Enterprise': 149206,\n//         'Small Business': 276430,\n//     },\n//     EngagementStatus: {\n//         Inactive: 2258997,\n//         Internal: 16799,\n//         Invalid: 131612,\n//         Lapsed: 577054,\n//         Lapsing: 291377,\n//         'Most Activ': 492981\n//     },\n//     companyCount: 736823,\n//     contactCount: 3768820\n// };\n\n// Given an object of filters, build a SQL Query\n//\n// @param filters Object with shape {\n//      filter1: [],\n//      filter2: [].\n//      ...\n//  }\n// @return String SQL Query to get counts\nconst heyLookAnotherStatsMethodTakesInFiltersOutputsStatsBlock = (filters) => {\n    const query = getQueryPromise();\n    const sqlQuery = `${sqlBase} ${getWhereClause(filters)}`;\n    console.log('***** SQL *****\\n', sqlQuery, '\\n***** END SQL *****');\n    const statsReturn = query(`${sqlBase} ${getWhereClause(filters)}`).await();\n    // console.log('***** Return *****\\n', statsReturn, '\\n***** Return *****');\n    const statsBlock = getStatsFromSQLResponse(statsReturn);\n    // console.log('....StatsBlock.....\\n', statsBlock);\n    return statsBlock;\n};\nconst DBNameMap = {\n    'Enterprise Application Platform': 'Enterprise_Application_Platform'\n}\nconst sqlBase = 'SELECT sum(count) AS count, sum(`NA`) AS `NA`, sum(`LATAM`) AS `LATAM`, sum(`EMEA`) AS `EMEA`, sum(`APAC`) AS `APAC`, sum(`IT Manager`) AS `IT Manager`, sum(`Other`) AS `Other`, sum(`Lead Developer`) AS `Lead Developer`, sum(`IT Executive`) AS `IT Executive`, sum(`Business Analyst`) AS `Business Analyst`, sum(`System Administrator`) AS `System Administrator`, sum(`Architect`) AS `Architect`, sum(`IT Decision Maker`) AS `IT Decision Maker`, sum(`Enterprise`) AS `Enterprise`, sum(`Mid-Market Enterprise`) AS `Mid-Market Enterprise`, sum(`Medium Business`) AS `Medium Business`, sum(`Small Business`) AS `Small Business`, sum(`Manufacturing`) AS `Manufacturing`, sum(`Finance`) AS `Finance`, sum(`Telecommunications`) AS `Telecommunications`, sum(`Media & Internet`) AS `Media & Internet`, sum(`Healthcare`) AS `Healthcare`, sum(`Education`) AS `Education`, sum(`Government`) AS `Government`, sum(`Inactive`) AS `Inactive`, sum(`Lapsed`) AS `Lapsed`, sum(`Most Active`) AS `Most Active`, sum(`Lapsing`) AS `Lapsing`, sum(`Invalid`) AS `Invalid`, sum(`Internal`) AS `Internal`, sum(`Accelerate`) AS `Accelerate`, sum(`Integrate`) AS `Integrate`, sum(`Efficiency`) AS `Efficiency`, sum(`Transitional`) AS `Transitional`, sum(`Agility`) AS `Agility`, sum(`Training`) AS `Training`, sum(`RHEL`) AS `RHEL`, sum(`Satellite`) AS `Satellite`, sum(`RHEV`) AS `RHEV`, sum(`Enterprise_Application_Platform`) AS `Enterprise_Application_Platform`, sum(`OpenStack`) AS `OpenStack`, sum(`CloudForms`) AS `CloudForms` FROM contact_counts ';\nconst getWhereClause = (filters) => {\n    const where = Object.keys(filters)\n        .filter(k => filters[k].length)\n        .map(k => {\n            const thisArr = filters[k];\n            return `(${thisArr\n                .map(val => DBNameMap[val] || val)\n                .map(val => `\\`${val}\\`>0`)\n                .join(' OR ')})`;\n        }).join(' AND ');\n    if (where.length) {\n        return `WHERE ${where};`;\n    }\n    return ';';\n};\n/**\n *\n * @param SQLRes has shape\n     [{\n        NA: <Integer>,\n        LATAM: <Integer>,\n        EMEA: <Integer>,\n        APAC: <Integer>,\n        IT Manager: <Integer>,\n        Other: <Integer>,\n        Lead Developer: <Integer>,\n        IT Executive: <Integer>,\n        Business Analyst: <Integer>,\n        System Administrator: <Integer>,\n        Architect: <Integer>,\n        IT Decision Maker: <Integer>,\n        Enterprise: <Integer>,\n        Mid-Market Enterprise: <Integer>,\n        Medium Business: <Integer>,\n        Small Business: <Integer>,\n        Manufacturing: <Integer>,\n        Finance: <Integer>,\n        Telecommunications: <Integer>,\n        Media & Internet: <Integer>,\n        Healthcare: <Integer>,\n        Education: <Integer>,\n        Government: <Integer>,\n        Inactive: <Integer>,\n        Lapsed: <Integer>,\n        Most Active: <Integer>,\n        Lapsing: <Integer>,\n        Invalid: <Integer>,\n        Internal: <Integer>,\n        ModAppDev_Accelerate: <Integer>,\n        ModAppDev_Integrate: <Integer>,\n        ITWOB_Efficiency: <Integer>,\n        ITWOB_Transitional: <Integer>,\n        ITWOB_Agility: <Integer>,\n        Training: <Integer>,\n        RHEL: <Integer>,\n        Satellite: <Integer>,\n        RHEV: <Integer>,\n        Enterprise_Application_Platform: <Integer>,\n        OpenStack: <Integer>,\n        CloudForms: <Integer>\n    }]\n *\n * @return Object with shapeObject with shape\n {\n     Area1: {\n         Element1: 123,\n         Element2: 234,\n         ...\n     },\n     Area2: {\n         Element3: 345,\n         Element4: 456,\n         ...\n     },\n     ...\n}\n */\nconst getStatsFromSQLResponse = (SQLRes) => {\n    if (SQLRes.length !== 1) {\n        console.log('SQLRes should have one row', SQLRes);\n    }\n    const thisRes = SQLRes[0];\n    return {\n        contactCount: thisRes.count,\n        companyCount: thisRes.companies,\n        'Super Regions': {\n            'NA': thisRes['NA'],\n            'LATAM': thisRes['LATAM'],\n            'EMEA': thisRes['EMEA'],\n            'APAC': thisRes['APAC']\n        },\n        Persona: {\n            'IT Manager': thisRes['IT Manager'],\n            'Other': thisRes['Other'],\n            'Lead Developer': thisRes['Lead Developer'],\n            'IT Executive': thisRes['IT Executive'],\n            'Business Analyst': thisRes['Business Analyst'],\n            'System Administrator': thisRes['System Administrator'],\n            'Architect': thisRes['Architect'],\n            'IT Decision Maker': thisRes['IT Decision Maker']\n        },\n        'Company Size': {\n            'Enterprise': thisRes['Enterprise'],\n            'Mid-Market Enterprise': thisRes['Mid-Market Enterprise'],\n            'Medium Business': thisRes['Medium Business'],\n            'Small Business': thisRes['Small Business']\n        },\n        Industry: {\n            'Manufacturing': thisRes['Manufacturing'],\n            'Finance': thisRes['Finance'],\n            'Telecommunications': thisRes['Telecommunications'],\n            'Media & Internet': thisRes['Media & Internet'],\n            'Healthcare': thisRes['Healthcare'],\n            'Education': thisRes['Education'],\n            'Government': thisRes['Government']\n        },\n        'Engagement Status': {\n            'Inactive': thisRes['Inactive'],\n            'Lapsed': thisRes['Lapsed'],\n            'Most Active': thisRes['Most Active'],\n            'Lapsing': thisRes['Lapsing'],\n            'Invalid': thisRes['Invalid'],\n            'Internal': thisRes['Internal']\n        },\n        Programs: {\n            'Accelerate': thisRes['Accelerate'],\n            'Integrate': thisRes['Integrate'],\n            'Efficiency': thisRes['Efficiency'],\n            'Transitional': thisRes['Transitional'],\n            'Agility': thisRes['Agility'],\n            'Training': thisRes['Training'],\n        },\n        'Installed Technologies': {\n            'RHEL': thisRes['RHEL'],\n            'Satellite': thisRes['Satellite'],\n            'RHEV': thisRes['RHEV'],\n            'Enterprise_Application_Platform': thisRes['Enterprise_Application_Platform'],\n            'OpenStack': thisRes['OpenStack'],\n            'CloudForms': thisRes['CloudForms']\n        }\n    };\n};\n\n","import { Meteor } from 'meteor/meteor';\nimport { getEloquaDataPromise, getEloquaDataResults, getOneEloquaPage, SEGMENTS_URL, CONTACTS_URL } from './getEloquaData.js';\nimport { Segments, EloquaLogs, Logs } from '../imports/collections.js';\nimport { Restivus } from 'meteor/nimble:restivus';\nimport { accumulateStats } from '../imports/helpers/stats.js';\n\n// Take an Eloqua response and insert the elements into the Segments collection\n// Use with getEloquaResponse\nconst insertSegments = Meteor.bindEnvironment( (body) => {\n  for (const obj of body.elements) {\n    Segments.upsert({ _id: obj.id }, { $set: { _id: obj.id, name: obj.name } });\n  }\n});\n\n\n// Called Daily to upsert new segment IDs\nexport const updateSegmentList = Meteor.bindEnvironment( () => {\n  getEloquaDataPromise(SEGMENTS_URL, insertSegments).await();\n});\n\n///////////////\n//\n// Meteor Startup code\n//\n///////////////\nMeteor.startup(() => {\n  if (Segments.find().count() === 0) { // Populate the server with data if it is currently empty.\n    console.log('Populating Segments');\n    Segments._ensureIndex({ name: 1 });\n    updateSegmentList();\n  }\n  const updateSegmentsEveryMorning = new Cron(updateSegmentList, { minute: 0, hour: 1 });\n});\n\n////////////////\n//\n// Meteor.Methods here\n//\n////////////////\nMeteor.methods({\n\n  //Get a segment's contacts and accumulate stats\n  getSegmentStatsByName(name) {\n    //Log lookup\n    Logs.insert({\n      type: 'Lookup',\n      input: name,\n      records: 1,\n      date: new Date()\n    });\n    //If we have the stats of the segment cached, return the existing results.\n    const segment = Segments.findOne({ name });\n    if (!segment) {\n      throw new Meteor.Error(`Could Not Find Segment Name: ${name}`);\n    }\n    if (segment.stats) {\n      return segment;\n    }\n    console.log(segment);\n    // Otherwise start to build and then return the stats\n    return Meteor.call('getSegmentStats', segment);\n  },\n\n  getSegmentStats(segment) {\n    const firstPage = getOneEloquaPage(segment['_id']).await();\n    segment.total = firstPage.total;\n    segment.stats = accumulateStats(firstPage.elements, 'eloqua', null);\n    if (firstPage.total > 1000) {\n      \n      const N = Math.ceil((firstPage.total - 1) / 1000);\n      const promArray = [];\n      for (let i = 2; i <= N; i++) {\n        promArray.push(getOneEloquaPage(segment['_id'], i).then((res) => accumulateStats(res.elements, 'eloqua', segment.stats)));\n      }\n      Promise.all(promArray).await();\n    }\n    // Update the Cache\n    segment.lastRefreshed = new Date();\n    segment.dataSample = firstPage.elements.slice(0,40).map(row => ({\n      first: row.C_FirstName,\n      last: row.C_LastName,\n      email: row.C_EmailAddress.replace(/.*@/, '***@')\n    }));\n    Segments.update({'_id': segment['_id']}, segment);\n    return segment;\n  }\n});\n\n\n\n\n/////////////\n//\n// Rest API starts here\n//\n/////////////\nconst RESTAPI = new Restivus({\n  apiPath: 'ws',\n  defaultHeaders: {\n    'Content-Type': 'application/json'\n  },\n  prettyJson: true,\n});\n\n// ADMIN UTILITY to refresh data\n//https://...com/ws/refresh\n// Use Eloqua Credentials in header\nRESTAPI.addRoute('refresh',{\n  post: function () {\n    if (this.request.headers.authorization === process.env.AUTHORIZATION){\n      console.log('Well Authorized, good sirs! Refreshing Data!');\n      updateSegmentList();\n      return {\n        statusCode: 200,\n        body: 'Success!'\n      };\n    } else{\n      console.log('/ws/refresh was activated but the authorization was incorrect');\n      console.log(this.request.headers.authorization);\n      console.log(process.env.AUTHORIZATION);\n      return { statusCode: 401 };\n    }\n  }\n});\n\n//http:/...com/ws/eloquaCallsInLastNDays/:days\nRESTAPI.addRoute('eloquaCallsInLastNDays/:days',{\n  get: function () {\n    let startDate = new Date();// Current Date\n    const days = this.urlParams.days;\n    startDate.setDate(startDate.getDate() - days); // Subtract N Days\n    startDate.setHours(0);  // Set the hour, minute and second components to 0\n    startDate.setMinutes(0);\n    startDate.setSeconds(0);\n    const count = EloquaLogs.find({ date: {$gte: startDate } }).map((doc) => Math.ceil(doc.numPagesToGet)).reduce((a, b) => a + b, 0);\n    return { days, count };\n  }\n});\n\n// http://...com/ws/PathCodes\n// http://...com/ws/PathCodes/:id\nRESTAPI.addCollection(Segments, {\n  excludedEndpoints: ['post', 'put', 'delete'],\n});\n\nRESTAPI.addCollection(EloquaLogs, {\n  excludedEndpoints: ['post', 'put', 'delete'],\n});\n\n// Get a report of contacts looked up\nRESTAPI.addRoute('usageReport', {\n  get: function () {\n    const oneDay = new Date();// Current Date\n    oneDay.setDate(oneDay.getDate() - 1); // Subtract N Days\n    const sevenDays = new Date();// Current Date\n    sevenDays.setDate(sevenDays.getDate() - 7); // Subtract N Days\n    const fourteenDays = new Date();// Current Date\n    fourteenDays.setDate(fourteenDays.getDate() - 14); // Subtract N Days\n    const thirtyDays = new Date();// Current Date\n    thirtyDays.setDate(thirtyDays.getDate() - 30); // Subtract N Days\n    const threeSixtyFiveDays = new Date();// Current Date\n    threeSixtyFiveDays.setDate(thirtyDays.getDate() - 365); // Subtract N Days\n    const REDUCE_SUM = (a, b) => a + b;\n    const lastDay = Logs.find({type: 'Lookup',date: {$gte: oneDay } });\n    const lastWeek = Logs.find({type: 'Lookup',date: {$gte: sevenDays } });\n    const lastTwoWeeks = Logs.find({type: 'Lookup',date: {$gte: fourteenDays } });\n    const lastMonth = Logs.find({type: 'Lookup',date: {$gte: thirtyDays } });\n    const lastYear = Logs.find({type: 'Lookup',date: {$gte: threeSixtyFiveDays } });\n    return {\n      contactsFound: {\n        lastDay: lastDay.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastWeek: lastWeek.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastTwoWeeks: lastTwoWeeks.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastMonth: lastMonth.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastYear: lastYear.map((doc) => doc.records).reduce(REDUCE_SUM, 0)\n      },\n      uses: {\n        lastDay: lastDay.count(),\n        lastWeek: lastWeek.count(),\n        lastTwoWeeks: lastTwoWeeks.count(),\n        lastMonth: lastMonth.count(),\n        lastYear: lastYear.count()\n      }\n    }\n  }\n});\n\n","// 'use strict';\n//\n// const http = require('https');\n// const SEGMENT_LOOKUP = {\n//   host: 'secure.p01.eloqua.com',\n//   path: '/Api/rest/2.0/assets/contact/segments?depth=Complete',\n//   headers: {\n//     authorization: process.env.AUTHORIZATION\n//   }\n// };\n//\n// http.get(SEGMENT_LOOKUP, (res) => {\n//   let body = '';\n//   res.on('data', (chunk) => {\n//     console.log('Got a chunk!');\n//     body += chunk;\n//   });\n//   res.on('end', () => {\n//     const elementTypes = {};\n//     const fullResponse = JSON.parse(body);\n//     for (const obj of fullResponse.elements) {\n//       for (const obj2 of obj.elements) {\n//         if (obj2.type.includes('Filter')) {\n//           console.log('***************');\n//           console.log(JSON.stringify(obj2));\n//           console.log('+++++++++++++++');\n//           console.log(JSON.stringify(obj));\n//           console.log('***************');\n//         }\n//\n//       }\n//     }\n//     console.log(JSON.stringify(elementTypes));\n//   });\n// });\n// console.log('This may take a while');\n"]}