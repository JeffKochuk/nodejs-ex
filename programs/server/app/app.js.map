{"version":3,"sources":["meteor://ðŸ’»app/imports/helpers/mysql.js","meteor://ðŸ’»app/imports/helpers/stats.js","meteor://ðŸ’»app/imports/collections.js","meteor://ðŸ’»app/server/getEloquaData.js","meteor://ðŸ’»app/server/segmentBuilderMethods.js","meteor://ðŸ’»app/server/segmentBuilderMethodsV3.js","meteor://ðŸ’»app/server/main.js","meteor://ðŸ’»app/testEloquaRest.js"],"names":["module","export","getConnection","getQueryPromise","mysql","importSync","v","connection","createConnection","JSON","parse","process","env","MYSQL_OBJECT","connect","qString","Promise","resolve","reject","query","err","data","accumulateStats","mysqlMap","eloquaMap","Map","set","mapsAvailable","eloqua","elements","source","stats","Error","mapToUse","total","forEach","val","el","statAccumulatorName","eloquaFieldName","replace","count","Segments","EloquaLogs","Logs","Stats","SqlCache","Mongo","Collection","getOneEloquaPage","getEloquaDataPromise","getEloquaDataResults","SEGMENTS_URL","CONTACTS_URL","LEIA_VIEW_URL","fetch","EloquaOptions","headers","authorization","AUTHORIZATION","id","page","Meteor","url","then","res","json","applyToEach","console","log","body","numPagesToGet","parseInt","pageSize","insert","date","Date","pagesArray","i","push","all","await","retArray","newElements","row","concat","sqlstring","statsFields","sparseStatsFields","fullStatsFields","methods","segmentBuilderSaveToEloqua","formData","placeToPostTo","thenQueue","criteria","engagement","length","criterion","join","personas","completeness","industry","metro","theme","filter","valueOf","map","c","template","name","stringify","method","x","getStats","filters","thisWeek","setDate","getDate","existingStats","find","$gt","hasStats","setTimeout","upsert","getCompanies","companies","companiesList","getCompanyStats","getCountries","countryList","getCountryStats","getStatsWithCompany","getStatsWithCountry","getStatsWithCountryAndCompany","whereClause","getWhereClause","sqlQuery","fullStatsCountryBase","statsReturn","getStatsFromSQLResponse","k","metroQuery","metroStatsBase","metroStatsBase2","metroReturn","metroAreas","MetroArea","sqlBase","companyQuery","sqlCompanyBase","sqlCompanyBase2","companiesReturn","r","Companies","companyCount","fullStatsCompanyBase","countryCountsSQLBase1","countryCountsSQLBase2","countries","retObj","Country","fullStatsCountryCompanyBase","metroStatsBaseCC","metroStatsBaseCC2","countryStatsBaseCC","countryStatsBaseCC2","queryReturn","countryReturn","countableFields","uncountableFields","keys","Object","whereCountable","thisArr","whereUncountable","escape","where","SQLRes","thisRes","contactCount","Persona","Industry","Programs","updateSegmentList","Restivus","insertSegments","bindEnvironment","obj","_id","$set","startup","_ensureIndex","updateSegmentsEveryMorning","Cron","minute","hour","getSegmentStatsByName","type","input","records","segment","findOne","call","getSegmentStats","firstPage","N","Math","ceil","promArray","lastRefreshed","dataSample","slice","first","C_FirstName","last","C_LastName","email","C_EmailAddress","update","RESTAPI","apiPath","defaultHeaders","prettyJson","addRoute","post","request","statusCode","get","startDate","days","urlParams","setHours","setMinutes","setSeconds","$gte","doc","reduce","a","b","addCollection","excludedEndpoints","oneDay","sevenDays","fourteenDays","thirtyDays","threeSixtyFiveDays","REDUCE_SUM","lastDay","lastWeek","lastTwoWeeks","lastMonth","lastYear","contactsFound","uses"],"mappings":"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","file":"/app.js","sourcesContent":["import mysql from \"mysql\";\n\nexport const getConnection = () => {\n    const connection = mysql.createConnection(JSON.parse(process.env.MYSQL_OBJECT));\n    connection.connect();\n    return connection;\n};\n\nexport const getQueryPromise = () => {\n    const connection = getConnection();\n    return (qString) => {\n        return new Promise((resolve, reject) => {\n            connection.query(qString, (err, data) => {\n                if (err) return reject(err);\n                resolve(data);\n            })\n        })\n    };\n};\n\n\n","/**\n * Created by jkochuk on 10/5/16.\n */\nconst eloquaMap = new Map()\n    .set(\"C_Lead_Rating___Combined1\", 'Lead Rating')\n    .set(\"C_Lead_Ranking1\", 'Lead Ranking')\n    .set(\"C_Company\", 'Company')\n    .set(\"C_Company_Size11\", 'Company Size')\n    .set(\"C_Derived__Persona1\", 'Persona')\n    .set(\"C_Industry1\", 'Industry')\n    .set(\"C_Derived_Language_Preference1\", 'Language')\n    .set(\"C_Country\", 'Country');\n\nconst mysqlMap = new Map()\n    .set(\"MLSMScore\", 'Lead Rating')\n    .set(\"MLSMRank\", 'Lead Ranking')\n    .set(\"Company\", 'Company')\n    .set(\"Size\", 'Company Size')\n    .set(\"Persona\", 'Persona')\n    .set(\"Industry\", 'Industry')\n    .set(\"Language\", 'Language')\n    .set(\"Country\", 'Country');\n\nconst mapsAvailable = {\n    eloqua: eloquaMap,\n    mysql: mysqlMap\n};\n\n\n// Function accumulateStats takes an eloqua response's ELEMENTS field and counts the occurances for each value.\n// Also can take the result of a mysql query and handle it the same way\nconst accumulateStats = (elements, source, stats) => {\n    if (source !== 'mysql' && source !== 'eloqua') {\n        throw new Error('accumulateStats called without specifying the source');\n    }\n    const mapToUse = mapsAvailable[source];\n    \n    // Initialize our array if nothing was passed\n    if (!stats) {\n        stats = { total: 0 };\n        mapToUse.forEach((val) => stats[val]={});\n    }\n    // Make sure we hve a total field available in stats;\n    if (!stats.total) {\n        stats.total = 0;\n    }\n    // Accumulate values of statsMap into stats;\n    for (const el of elements) {\n        mapToUse.forEach((statAccumulatorName, eloquaFieldName) => {\n            // Mongo will be sad if we don't escape . and $ with alternate characters\n            if(el[eloquaFieldName]){\n                el[eloquaFieldName] = el[eloquaFieldName].replace(/\\./g, '\\uff0e').replace(/\\$/g, '\\uff04');\n            }\n            // Set or increment the stats, where 'VAL' is the stat name and 'el[key]' is the stat value\n            stats[statAccumulatorName][el[eloquaFieldName]] = ( stats[statAccumulatorName][el[eloquaFieldName]] + (el.count || 1) ) || (el.count || 1);\n        });\n        stats.total += (el.count || 1);\n    }\n    return stats;\n};\n\nexport { accumulateStats, mysqlMap }","import { Mongo } from 'meteor/mongo';\n\nexport const Segments = new Mongo.Collection('segments');\nexport const EloquaLogs = new Mongo.Collection('eloquaLogs');\nexport const Logs = new Mongo.Collection('logs');\nexport const Stats = new Mongo.Collection('statCache');\nexport const SqlCache = new Mongo.Collection('sqlCache');\n\n","import fetch from 'node-fetch';\nimport { EloquaLogs } from '../imports/collections.js';\nconst EloquaOptions = {\n  headers: {\n    authorization: process.env.AUTHORIZATION,\n  },\n};\n\nexport const getOneEloquaPage = function(id, page = 1) {\n    if(!id) throw new Meteor.Error(`id: ${id} is not valid`);\n    const url = `${LEIA_VIEW_URL}/${id}?page=${page}`;\n    return fetch(url,EloquaOptions)\n        .then(res => res.json());\n};\n\n// Take an Eloqua URI and a function. Applies the function to the body of each page. Use this one to insert values  \nexport const getEloquaDataPromise = (url, applyToEach) => {\n  console.log(`Getting URL Promise: ${url}`);\n  return fetch(url, EloquaOptions)\n    .then((res) => res.json())\n    .then((body) => {\n      console.log(body.total + 'elements in query');\n      const numPagesToGet = parseInt(body.total, 10) / parseInt(body.pageSize, 10);\n      EloquaLogs.insert({ url, numPagesToGet, date: new Date() });\n      const pagesArray = [];\n      applyToEach(body);\n      if (numPagesToGet > 1) {\n        for (let i = 1; i < numPagesToGet; i++) {\n          pagesArray.push(\n            fetch(`${url}?page=${i + 1}`, EloquaOptions)\n              .then(res => res.json())\n              .then(applyToEach)\n          );\n        }\n        Promise.all(pagesArray).await();\n      }\n      return body.total;\n    });\n};\n\n// Get eloqua data and return all data as an array\nexport const getEloquaDataResults = (url) => {\n  console.log(`Getting URL Promise: ${url}`);\n  return fetch(url, EloquaOptions)\n    .then((res) => res.json())\n    .then((body) => {\n      console.log(body.total + 'elements in query');\n      const numPagesToGet = parseInt(body.total, 10) / parseInt(body.pageSize, 10);\n      EloquaLogs.insert({ url, numPagesToGet, date: new Date() });\n      let pagesArray = [];\n      let retArray = body.elements;\n      if (numPagesToGet > 1) {\n        for (let i = 1; i < numPagesToGet; i++) {\n          pagesArray.push(\n            fetch(`${url}?page=${i + 1}`, EloquaOptions)\n              .then(res => res.json())\n              .then(json => json.elements)\n          );\n        }\n        const newElements = Promise.all(pagesArray).await();\n        for (let row of newElements) {\n          retArray = retArray.concat(row);\n        }\n      }\n\n      return retArray;\n    });\n};\n\n// NO ID NEEDED for Segments_url\nexport const SEGMENTS_URL = 'https://secure.p01.eloqua.com/Api/rest/2.0/assets/contact/segments';\n// MAKE SURE to add a ID to CONTACTS_URL\n// https://secure.p01.eloqua.com/API/REST/2.0/data/contact/view/100081/contacts/segment/943\nexport const CONTACTS_URL = 'https://secure.p01.eloqua.com/API/REST/2.0/data/contact/view/100081/contacts/segment';\n\nexport const LEIA_VIEW_URL = 'https://secure.p01.eloqua.com/API/REST/2.0/data/contact/view/100190/contacts/segment';\n\n\n\n","/**\n * Created by jkochuk on 10/3/16.\n */\n\nimport { Meteor } from 'meteor/meteor';\nimport { getConnection, getQueryPromise } from '../imports/helpers/mysql.js';\nimport { accumulateStats, mysqlMap } from '../imports/helpers/stats.js';\nimport fetch from 'node-fetch';\nimport sqlstring from 'sqlstring';\n\n// Data should look like this\n// {\n//      email: \"jkochuk@redhat.com\",\n//      areasOfInterest: Array[2],\n//      interestSource: Array[1],\n//      activeUsers: false,\n//      personas: Array[2],\n//      completeness: true,\n//      geography: \"\",\n//      geographyRadius: \"\",\n//      industry: Array[1]\n// }\nconst statsFields = ['Language', 'Size', 'Industry', 'SuperRegion', 'Persona'];\nconst sparseStatsFields = ['Company', 'Country', 'MetroArea'];\nconst fullStatsFields = ['Persona', 'Language', 'Size', 'Industry', 'Company', 'Country', 'MLSMScore', 'MLSMRank'];\n\nMeteor.methods({\n    // getQuickStats(filters) {\n    //     if (!(filters.Themes && filters.Themes.length)) {\n    //         console.log('No Themes')\n    //         console.log(filters);\n    //         return { loading: false };\n    //     }\n    //     const query = getQueryPromise();\n    //     // const qs = `SELECT COUNT(*) as count FROM (${themes.map(e => `SELECT emailAddress FROM ${e}`).join(' UNION DISTINCT ')}) a`;\n    //     // const startTime = Date.now(); // @todo remove\n    //     const { Themes, ...rest } = filters;\n    //     const filtersWithCriteria = Object.keys(rest).filter(k=>rest[k].length);\n    //     let qs = `SELECT ${statsFields}, COUNT(*) AS count FROM ${Themes[0]} a LEFT JOIN contacts b ON a.emailAddress = b.emailAddress WHERE ${filtersWithCriteria.length ? filtersWithCriteria.map(k=>`${k} IN (${rest[k].map(sqlstring.escape)})`).join(' AND ') : '1=1'} GROUP BY Language, Size, Industry, SuperRegion, Persona;`;\n    //     console.log(qs);\n    //     const res = query(qs).await();\n    //     // const midTime = Date.now();// @todo remove\n    //     let count = 0;\n    //     const stats = { count: 0 };\n    //     for (let n of statsFields) {\n    //         stats[n]={};\n    //     }\n    //     for (let row of res) {\n    //         const { count } = row;\n    //         stats.count += count;\n    //         for (let stat of statsFields) {\n    //             stats[stat][row[stat]] = (stats[stat][row[stat]] || 0) + count;\n    //         }\n    //     }\n    //     // console.log('Count', stats.count); //@todo\n    //     // console.log('Half Way', midTime - startTime);//@todo\n    //     // console.log('Full time', Date.now() - startTime);//@todo\n    //     return { stats }\n    // },\n    //\n    // // @todo you can just put this as another instance of getStats\n    // getSparseStats(filters) {\n    //     if (!(filters.Themes && filters.Themes.length)) {\n    //         console.log('No Themes');\n    //         console.log(filters);\n    //         return { loading: false };\n    //     }\n    //     const query = getQueryPromise();\n    //     // const qs = `SELECT COUNT(*) as count FROM (${themes.map(e => `SELECT emailAddress FROM ${e}`).join(' UNION DISTINCT ')}) a`;\n    //     // const startTime = Date.now(); // @todo remove\n    //     const { Themes, ...rest } = filters;\n    //     const filtersWithCriteria = Object.keys(rest).filter(k=>rest[k].length);\n    //     let qs = `SELECT ${sparseStatsFields}, COUNT(*) AS count FROM ${Themes[0]} a LEFT JOIN contacts b ON a.emailAddress = b.emailAddress WHERE ${filtersWithCriteria.length ? filtersWithCriteria.map(k=>`${k} IN (${rest[k].map(sqlstring.escape)})`).join(' AND ') : '1=1'} GROUP BY ${sparseStatsFields};`;\n    //     console.log(qs);\n    //     const res = query(qs).await();\n    //     const sparseStats = {};\n    //     for (let n of sparseStatsFields) {\n    //         sparseStats[n]={};\n    //     }\n    //     for (let row of res) {\n    //         const { count } = row;\n    //         sparseStats.count += count;\n    //         for (let stat of sparseStatsFields) {\n    //             sparseStats[stat][row[stat]] = (sparseStats[stat][row[stat]] || 0) + count;\n    //         }\n    //     }\n    //     return { sparseStats }\n    // },\n    //\n    // getFullStats(filters) {\n    //     // const startTime = Date.now(); // @todo remove\n    //     if (!(filters.Themes && filters.Themes.length)) {\n    //         console.log('No Themes');\n    //         console.log(filters);\n    //         return { loading: false };\n    //     }\n    //     const { Themes, ...rest } = filters;\n    //     const filtersWithCriteria = Object.keys(rest).filter(k=>rest[k].length); // Get keys of rest with values of non-empty arrays\n    //     let qs = `SELECT ${fullStatsFields}, COUNT(*) AS count FROM ${Themes[0]} a LEFT JOIN contacts b ON a.emailAddress = b.emailAddress WHERE ${filtersWithCriteria.length ? filtersWithCriteria.map(k=>`${k} IN (${rest[k].map(sqlstring.escape)})`).join(' AND ') : '1=1'} GROUP BY ${fullStatsFields};`;\n    //     const query = getQueryPromise();\n    //     console.log(qs);\n    //     const queryReturn = query(qs)\n    //         .then((rows) => {\n    //             console.log(rows.length);\n    //             return rows;\n    //         })\n    //         .await();\n    //     const fullStats = accumulateStats(queryReturn, 'mysql', null);\n    //     console.log(fullStats.total);\n    //     return {\n    //         fullStats\n    //     };\n    // },\n    //\n    //\n    // segmentBuilderBuildOriginalStats(formData) {\n    //     let query = 'select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from contacts';\n    //     let whereClauses = [];\n    //     let isThereEnoughData = false;\n    //     if (formData.engagement && formData.engagement.length) {\n    //         whereClauses.push(`EngagementStatus IN ('${formData.engagement.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.personas.length) {\n    //         whereClauses.push(`Persona IN ('${formData.personas.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.completeness && formData.completeness.length) {\n    //         whereClauses.push(`CompletenessLevel IN ('${formData.completeness.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.industry.length) {\n    //         whereClauses.push(`Industry IN ('${formData.industry.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.metro.length) {\n    //         whereClauses.push(`MetroArea IN ('${formData.metro.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.theme.length) {\n    //         query = \"select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from (SELECT distinct emailAddress from THEME_LINK where theme in ('\" + formData.theme.join('\\',\\'') + \"')) theme inner join contacts on theme.emailAddress = contacts.emailAddress \";\n    //         isThereEnoughData = true;\n    //     }\n    //\n    //     if (isThereEnoughData) {\n    //         if (whereClauses.length) {\n    //             query = query + ' where ' + whereClauses.join(' AND ');\n    //         }\n    //         console.log(query);\n    //         //@todo remove this LIMIT once you have indices in place\n    //         query = query + ' LIMIT 10000';\n    //         const connection = getConnection();\n    //         const queryDB = promisify(connection.query, connection);\n    //         const queryReturn = queryDB(query)\n    //             .then((rows) => {\n    //                 console.log(rows.length);\n    //                 return rows;\n    //             })\n    //             .await();\n    //\n    //         const stats = accumulateStats(queryReturn, 'mysql', null);\n    //         // console.log(stats);\n    //         const segment = {\n    //             stats,\n    //             total: queryReturn.length\n    //         };\n    //         // console.log(segment);\n    //         return segment;\n    //\n    //     } else {\n    //         throw new Meteor.Error('Need more details');\n    //     }\n    // },\n    // testStatsMethod(formData) {\n    //     const startTimeMethod1 = Date.now();\n    //     let query = 'select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from contacts';\n    //     let whereClauses = [];\n    //     let isThereEnoughData = false;\n    //     if (formData.engagement && formData.engagement.length) {\n    //         whereClauses.push(`EngagementStatus IN ('${formData.engagement.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.personas.length) {\n    //         whereClauses.push(`Persona IN ('${formData.personas.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.completeness && formData.completeness.length) {\n    //         whereClauses.push(`CompletenessLevel IN ('${formData.completeness.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.industry.length) {\n    //         whereClauses.push(`Industry IN ('${formData.industry.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.metro.length) {\n    //         whereClauses.push(`MetroArea IN ('${formData.metro.join(\"','\")}')`);\n    //         isThereEnoughData = true;\n    //     }\n    //     if (formData.theme.length) {\n    //         query = \"select contacts.Persona as Persona, contacts.Language as Language, contacts.Size as Size, contacts.Industry as Industry, contacts.Company as Company, contacts.Country as Country, contacts.MLSMScore as MLSMScore, contacts.MLSMRank as MLSMRank, contacts.MetroArea as MetroArea, contacts.EngagementStatus as EngagementStatus from (SELECT distinct emailAddress from THEME_LINK where theme in ('\" + formData.theme.join('\\',\\'') + \"')) theme inner join contacts on theme.emailAddress = contacts.emailAddress \";\n    //         isThereEnoughData = true;\n    //     }\n    //\n    //     if (isThereEnoughData) {\n    //         if (whereClauses.length) {\n    //             query = query + ' where ' + whereClauses.join(' AND ');\n    //         }\n    //         console.log(query);\n    //         //@todo remove this LIMIT once you have indices in place\n    //         // query = query + ' LIMIT 10000';\n    //         const connection = getConnection();\n    //         const queryDB = promisify(connection.query, connection);\n    //         const queryReturn = queryDB(query)\n    //             .then((rows) => {\n    //                 console.log(rows.length);\n    //                 return rows;\n    //             })\n    //             .await();\n    //\n    //         const stats = accumulateStats(queryReturn, 'mysql', null);\n    //         // console.log(stats);\n    //         const segment = {\n    //             stats,\n    //             total: queryReturn.length\n    //         };\n    //         // console.log(segment);\n    //         const endTimeMethod1 = Date.now();\n    //         console.log('Time for stats method 1', endTimeMethod1 - startTimeMethod1, '::::', Math.ceil((endTimeMethod1 - startTimeMethod1) / 1000), 'sec')\n    //         return segment;\n    //\n    //         // const startTimeMethod2 = Date.now();\n    //         // const fromQuery = query.slice(query.indexOf('from'));\n    //         // const countQueries = [];\n    //         // mysqlMap.forEach((key, name) => countQueries.push(`SELECT ${name}, COUNT(*) as 'count' ${fromQuery} GROUP BY ${name}`));\n    //         // console.log(countQueries);\n    //         // const joinedQuery = countQueries.join('; ');\n    //         // const stats2 = {};\n    //         // queryDB(joinedQuery)\n    //         //     .then((results) => {\n    //         //         // console.log(stats);\n    //         //         // console.log(results);\n    //         //         //results is an array of [{word, count(*)},{}],[]\n    //         //         results.forEach((entries) => {\n    //         //             let thisSetOfStats = '';\n    //         //             let thisDbName = '';\n    //         //             entries.forEach((entry) => {\n    //         //                 if (!thisSetOfStats) {\n    //         //                     const thisEntryHolder = Object.keys(entry).filter((x) => x !== 'count');\n    //         //                     if (thisEntryHolder.length) {\n    //         //                         thisDbName = thisEntryHolder[0];\n    //         //                         thisSetOfStats = mysqlMap.get(thisDbName);\n    //         //                         stats2[thisSetOfStats] = {}\n    //         //                     }\n    //         //                 }\n    //         //                 // Yeah this will be annoying to figure out so here's how it goes:\n    //         //                 //\n    //         //                 // Entries looks like this:\n    //         //                 // [ { MLSMScore: 'B1', 'count': 70 },\n    //         //                 // { MLSMScore: 'B2', 'count': 94 }, ... ]\n    //         //                 //\n    //         //                 // We want it to look like this:\n    //         //                 // { MLSMScore: {\n    //         //                 //      B1: 70,\n    //         //                 //      B2: 94, ...\n    //         //                 //    }\n    //         //                 // }\n    //         //                 stats2[thisSetOfStats][entry[thisDbName]] = entry.count;\n    //         //             });\n    //         //         });\n    //         //     })\n    //         //     .catch(console.log)\n    //         //     .await();\n    //         // //rankData, companies, map, etc...\n    //         //\n    //         //\n    //         //\n    //         // const endTimeMethod2 = Date.now();\n    //         // console.log('Time for stats method 1', endTimeMethod2 - startTimeMethod2, '::::', Math.ceil((endTimeMethod2 - startTimeMethod2) / 1000), 'sec');\n    //         //\n    //         // // console.log(stats2);\n    //         //\n    //         //\n    //         //\n    //         //\n    //         //\n    //         // segment.stats = stats2;\n    //         // return segment;\n    //\n    //     } else {\n    //         throw new Meteor.Error('Need more details');\n    //     }\n    // },\n\n    \n\n    //@TODO IMPLEMENT EVENTUALLY\n    segmentBuilderSaveToEloqua(formData){\n        const placeToPostTo = 'https://secure.p01.eloqua.com/API/REST/2.0/assets/contact/segment';\n        const thenQueue = 'https://secure.p01.eloqua.com/API/REST/2.0/assets/contact/segment/queue';\n\n        const criteria = [];\n        if (formData.engagement && formData.engagement.length) {\n            const criterion = {\n                \"type\": \"ContactFieldCriterion\",\n                \"id\": \"-1\",\n                \"condition\": {\n                    \"type\": \"TextSetCondition\",\n                    \"operator\": \"in\",\n                    \"optionListId\": \"-1\",\n                    \"quickListString\": formData.engagement.join(',')\n                },\n                \"fieldId\": \"100837\"\n            };\n            criteria.push(criterion)\n        }\n\n        if (formData.personas && formData.personas.length) {\n            const criterion = {\n                \"type\": \"ContactFieldCriterion\",\n                \"id\": \"-2\",\n                \"condition\": {\n                    \"type\": \"TextSetCondition\",\n                    \"operator\": \"in\",\n                    \"optionListId\": \"-2\",\n                    \"quickListString\": formData.personas.join(',')\n                },\n                \"fieldId\": \"100837\"\n            };\n            criteria.push(criterion)\n        }\n\n        if (formData.completeness && formData.completeness.length) {\n            const criterion = {\n                \"type\": \"ContactFieldCriterion\",\n                \"id\": \"-3\",\n                \"condition\": {\n                    \"type\": \"TextSetCondition\",\n                    \"operator\": \"in\",\n                    \"optionListId\": \"-3\",\n                    \"quickListString\": formData.completeness.join(',')\n                },\n                \"fieldId\": \"100811\"\n            };\n            criteria.push(criterion)\n        }\n\n        if (formData.industry && formData.industry.length) {\n            const criterion = {\n                \"type\": \"ContactFieldCriterion\",\n                \"id\": \"-4\",\n                \"condition\": {\n                    \"type\": \"TextSetCondition\",\n                    \"operator\": \"in\",\n                    \"optionListId\": \"-4\",\n                    \"quickListString\": formData.industry.join(',')\n                },\n                \"fieldId\": \"100046\"\n            };\n            criteria.push(criterion)\n        }\n\n        if (formData.metro && formData.metro.length) {\n            const criterion = {\n                \"type\": \"ContactFieldCriterion\",\n                \"id\": \"-5\",\n                \"condition\": {\n                    \"type\": \"TextSetCondition\",\n                    \"operator\": \"in\",\n                    \"optionListId\": \"-5\",\n                    \"quickListString\": formData.metro.join(',')\n                },\n                \"fieldId\": \"100818\"\n            };\n            criteria.push(criterion)\n        }\n\n        if (formData.theme && formData.theme.length) {\n            //@todo do theme here\n            console.log(\"We don't *DO* theme here...\");\n        }\n\n        const filter = {\n            \"isIncluded\": \"true\",\n            \"filter\": {\n                \"name\": \"Filter Criterion 1\",\n                \"scope\": \"local\",\n                \"id\": \"-111\",\n                \"createdBy\": \"2084\",\n                \"createdAt\": \"\" + new Date().valueOf() / 1000,\n                \"type\": \"ContactFilter\",\n                \"criteria\": criteria,\n                \"statement\": criteria.map((c) => c.id).join(' AND '),\n                \"x_e10_isTemplate\": \"false\",\n                \"permissions\": [\n                    \"Retrieve\",\n                    \"Update\",\n                    \"Delete\",\n                    \"SetSecurity\"\n                ]\n            },\n            \"id\": \"-112\",\n            \"type\": \"ContactFilterSegmentElement\"\n        };\n\n        const template = {\n            \"createdBy\": \"2084\",\n            \"createdAt\": \"1476197319\",\n            // \"updatedBy\": \"2084\",\n            // \"updatedAt\": \"1476197319\",\n            \"currentStatus\": \"Draft\",\n            \"type\": \"ContactSegment\",\n            \"elements\": [\n                filter\n            ],\n            \"isBlankTemplate\": true,\n            \"id\": \"-211\",\n            \"name\": `TESTTEST: ${formData.name}`,\n            \"permissions\": [\n                \"Retrieve\",\n                \"Update\",\n                \"Delete\",\n                \"SetSecurity\"\n            ],\n            \"folderId\": \"180344\",\n            \"x_e10_isTemplate\": \"false\",\n            \"depth\": \"complete\"\n        };\n        console.log(JSON.stringify(template));\n\n        // Actually post to Eloqua\n        fetch(placeToPostTo, { method: 'POST', body: JSON.stringify(template), headers: { authorization: process.env.AUTHORIZATION, \"Content-Type\": \"application/json\" } })\n            .then((res) => res.json())\n            .then((json) => {\n                console.log('***** First Half *****');\n                console.log(json);\n                return fetch(`${thenQueue}/${json.id}`, { method: 'POST', headers: { authorization: process.env.AUTHORIZATION, \"Content-Type\": \"application/json\" } })\n            })\n            .then((res) => res.json())\n            .then((json) => {\n                console.log('***** QUEUE RES *****');\n                console.log(json);\n            })\n            .await();\n        console.log('DONE!');\n\n\n    }\n});\n\n\n// const thisOneWorked = {\n//     \"createdBy\": \"2084\",\n//     \"createdAt\": \"1476197319\",\n//     \"currentStatus\": \"Draft\",\n//     \"type\": \"ContactSegment\",\n//     \"elements\": [\n//         {\n//             \"isIncluded\": \"true\",\n//             \"filter\": {\n//                 \"name\": \"Filter Criteria 1\",\n//                 \"scope\": \"local\",\n//                 \"id\": \"-111\",\n//                 \"createdBy\": \"2084\",\n//                 \"createdAt\": \"1476197359\",\n//                 \"type\": \"ContactFilter\",\n//                 \"criteria\": [{\n//                     \"type\": \"ContactFieldCriterion\",\n//                     \"id\": \"-5\",\n//                     \"condition\": {\n//                         \"type\": \"TextSetCondition\",\n//                         \"operator\": \"in\",\n//                         \"optionListId\": \"-5\",\n//                         \"quickListString\": \"High,Medium\"\n//                     },\n//                     \"fieldId\": \"100811\"\n//                 }],\n//                 \"statement\": \"-5\",\n//                 \"x_e10_isTemplate\": \"false\",\n//                 \"permissions\": [\n//                     \"Retrieve\",\n//                     \"Update\",\n//                     \"Delete\",\n//                     \"SetSecurity\"\n//                 ]\n//             },\n//             \"id\": \"-112\",\n//             \"type\": \"ContactFilterSegmentElement\"\n//         }\n//     ],\n//     \"isBlankTemplate\": true,\n//     \"id\": \"-211\",\n//     \"name\": \"TEST REST 123123\",\n//     \"permissions\": [\n//         \"Retrieve\",\n//         \"Update\",\n//         \"Delete\",\n//         \"SetSecurity\"\n//     ],\n//     \"folderId\": \"180344\",\n//     \"x_e10_isTemplate\": \"false\",\n//     \"depth\": \"complete\"\n// };\n\n\nvar x = {\n    \"createdBy\": \"2084\",\n    \"createdAt\": \"1476197319\",\n    \"currentStatus\": \"Draft\",\n    \"type\": \"ContactSegment\",\n    \"elements\": [{\n        \"isIncluded\": \"true\",\n        \"filter\": {\n            \"name\": \"Filter Criterion 1\",\n            \"scope\": \"local\",\n            \"id\": \"-111\",\n            \"createdBy\": \"2084\",\n            \"createdAt\": \"1479321218.145\",\n            \"type\": \"ContactFilter\",\n            \"criteria\": [{\n                \"type\": \"ContactFieldCriterion\",\n                \"id\": \"-4\",\n                \"condition\": {\n                    \"type\": \"TextSetCondition\",\n                    \"operator\": \"in\",\n                    \"optionListId\": \"-4\",\n                    \"quickListString\": \"Finance,Telecommunications\"\n                },\n                \"fieldId\": \"100046\"\n            }],\n            \"statement\": \"-4\",\n            \"x_e10_isTemplate\": \"false\",\n            \"permissions\": [\"Retrieve\", \"Update\", \"Delete\", \"SetSecurity\"]\n        },\n        \"id\": \"-112\",\n        \"type\": \"ContactFilterSegmentElement\"\n    }],\n    \"isBlankTemplate\": true,\n    \"id\": \"-211\",\n    \"name\": \"TEST: Leia Created 1479321218138\",\n    \"permissions\": [\"Retrieve\", \"Update\", \"Delete\", \"SetSecurity\"],\n    \"folderId\": \"180344\",\n    \"x_e10_isTemplate\": \"false\",\n    \"depth\": \"complete\"\n}\n","/**\n * Created by jkochuk on 2/16/17.\n */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Stats, SqlCache } from '../imports/collections.js';\nimport sqlstring from 'sqlstring';\nimport { getQueryPromise } from '../imports/helpers/mysql.js';\n\nMeteor.methods({\n    // Given an object of filters, get counts for all of the elements NOT filtered\n    //\n    // @param filters Object with shape {\n    //      filter1: [],\n    //      filter2: [].\n    //      ...\n    // }\n    // @return Object with shape {\n    //      Area1: {\n    //          Element1: 123,\n    //          Element2: 234,\n    //          ...\n    //      },\n    //      Area2: {\n    //          Element3: 345,\n    //          Element4: 456,\n    //          ...\n    //      },\n    //      ...\n    // }\n    getStats: (filters) => {\n\n        // See if we have stats logged for the given filters and return them if we do\n        const thisWeek = new Date();// Current Date\n        thisWeek.setDate(thisWeek.getDate() - 7);\n        const existingStats = Stats.find({ date: { $gt: thisWeek }, hasStats: true, ...filters }).fetch();\n        if (existingStats.length) {\n            return existingStats[0].stats;\n        }\n\n        // Make the SQL Query to get the required stats\n        const stats = getStats(filters);\n\n        //Insert the document into the Mongo Cache AFTER we return it to the\n        Meteor.setTimeout(() => {\n            Stats.upsert({ ...filters }, {\n                date: new Date(),\n                hasStats: true,\n                stats,\n                ...filters\n            });\n        }, 0);\n        return stats;\n    },\n\n    getCompanies: (filters) => {\n\n        // See if we have stats logged for the given filters and return them if we do\n        const thisWeek = new Date();// Current Date\n        thisWeek.setDate(thisWeek.getDate() - 7);\n        const existingStats = Stats.find({ date: { $gt: thisWeek }, companies: true, ...filters }).fetch();\n        if (existingStats.length) {\n            return existingStats[0].companiesList;\n        }\n\n        // Make the SQL Query to get the required stats\n        const companiesList = getCompanyStats(filters);\n\n        //Insert the document into the Mongo Cache AFTER we return it to the\n        Meteor.setTimeout(() => {\n            Stats.upsert({ ...filters, companies: true }, {\n                date: new Date(),\n                companies: true,\n                companiesList,\n                ...filters,\n\n            });\n        }, 0);\n        return companiesList;\n\n    },\n\n    // There are two ways to grab Countries based on whether we're filtering by Companies or not.\n    getCountries: (filters) => {\n\n        // See if we have stats logged for the given filters and return them if we do\n        const thisWeek = new Date();// Current Date\n        thisWeek.setDate(thisWeek.getDate() - 7);\n        const existingStats = Stats.find({ date: { $gt: thisWeek }, getCountries: true, ...filters }).fetch();\n        if (existingStats.length) {\n            return existingStats[0].countryList;\n        }\n\n        // Make the SQL Query to get the required stats\n        const countryList = getCountryStats(filters);\n\n        //Insert the document into the Mongo Cache AFTER we return it to the\n        Meteor.setTimeout(() => {\n            Stats.upsert({ ...filters, companies: true }, {\n                date: new Date(),\n                getCountries: true,\n                countryList,\n                ...filters,\n\n            });\n        }, 0);\n        return countryList;\n    },\n\n    getStatsWithCompany: (filters) => {\n        // See if we have stats logged for the given filters and return them if we do\n        const thisWeek = new Date();// Current Date\n        thisWeek.setDate(thisWeek.getDate() - 7);\n        const existingStats = Stats.find({ date: { $gt: thisWeek }, hasStats: true, ...filters }).fetch();\n        if (existingStats.length) {\n            return existingStats[0].stats;\n        }\n\n        // Make the SQL Query to get the required stats\n        const stats = getStatsWithCompany(filters);\n\n        //Insert the document into the Mongo Cache AFTER we return it to the\n        Meteor.setTimeout(() => {\n            Stats.upsert({ ...filters }, {\n                date: new Date(),\n                hasStats: true,\n                stats,\n                ...filters\n            });\n        }, 0);\n        return stats;\n\n    },\n\n    getStatsWithCountry: (filters) => {\n        // See if we have stats logged for the given filters and return them if we do\n        const thisWeek = new Date();// Current Date\n        thisWeek.setDate(thisWeek.getDate() - 7);\n        const existingStats = Stats.find({ date: { $gt: thisWeek }, getStatsWithCountry: true, ...filters }).fetch();\n        if (existingStats.length) {\n            return existingStats[0].stats;\n        }\n\n        // Make the SQL Query to get the required stats\n        const stats = getStatsWithCountry(filters);\n\n        //Insert the document into the Mongo Cache AFTER we return it to the\n        Meteor.setTimeout(() => {\n            Stats.upsert({ ...filters }, {\n                date: new Date(),\n                getStatsWithCountry: true,\n                stats,\n                ...filters\n            });\n        }, 0);\n        return stats;\n\n    },\n    getStatsWithCountryAndCompany: (filters) => {\n        // See if we have stats logged for the given filters and return them if we do\n        const thisWeek = new Date();// Current Date\n        thisWeek.setDate(thisWeek.getDate() - 7);\n        const existingStats = Stats.find({ date: { $gt: thisWeek }, getStatsWithCountryAndCompany: true, ...filters }).fetch();\n        if (existingStats.length) {\n            return existingStats[0].stats;\n        }\n\n        // Make the SQL Query to get the required stats\n        const stats = getStatsWithCountryAndCompany(filters);\n\n        //Insert the document into the Mongo Cache AFTER we return it to the\n        Meteor.setTimeout(() => {\n            Stats.upsert({ ...filters }, {\n                date: new Date(),\n                getStatsWithCountryAndCompany: true,\n                stats,\n                ...filters\n            });\n        }, 0);\n        return stats;\n    }\n});\n\n// Grab a full stats block from country_counts\nconst getStatsWithCountry = (filters) => {\n    const query = getQueryPromise();\n    const whereClause = getWhereClause(filters);\n    const sqlQuery = `${fullStatsCountryBase} ${whereClause}`;\n    const statsReturn = query(sqlQuery).await();\n    const stats = getStatsFromSQLResponse(statsReturn);\n    if (filters['Countries'].filter(k => k==='US').length) {\n        // Also grab MetroAreas if the US is selected\n        const metroQuery = `${metroStatsBase} ${whereClause} ${metroStatsBase2}`;\n        console.log('Metro Query\\n', metroQuery);\n        const metroReturn = query(metroQuery).await();\n        const metroAreas = {};\n        // This replace is stupid. We should do it in the DB but for now, this will allow us to store the values in Mongo\n        metroReturn.forEach(row => metroAreas[row.MetroArea.replace(/\\./g, '')] = row.count);\n        stats['Metro Areas'] = metroAreas;\n    }\n    return stats;\n};\nconst fullStatsCountryBase = 'SELECT sum(count) AS count, sum(`Email`) AS `Email`, sum(`Phone`) AS `Phone`, sum(`Mail`) AS `Mail`, sum(`NA`) AS `NA`, sum(`LATAM`) AS `LATAM`, sum(`EMEA`) AS `EMEA`, sum(`APAC`) AS `APAC`, sum(`IT Manager`) AS `IT Manager`, sum(`Other`) AS `Other`, sum(`Lead Developer`) AS `Lead Developer`, sum(`IT Executive`) AS `IT Executive`, sum(`Business Analyst`) AS `Business Analyst`, sum(`System Administrator`) AS `System Administrator`, sum(`Architect`) AS `Architect`, sum(`IT Decision Maker`) AS `IT Decision Maker`, sum(`Enterprise`) AS `Enterprise`, sum(`Mid-Market Enterprise`) AS `Mid-Market Enterprise`, sum(`Medium Business`) AS `Medium Business`, sum(`Small Business`) AS `Small Business`, sum(`Manufacturing`) AS `Manufacturing`, sum(`Finance`) AS `Finance`, sum(`Telecommunications`) AS `Telecommunications`, sum(`Media & Internet`) AS `Media & Internet`, sum(`Healthcare`) AS `Healthcare`, sum(`Education`) AS `Education`, sum(`Government`) AS `Government`, sum(`Inactive`) AS `Inactive`, sum(`Lapsed`) AS `Lapsed`, sum(`Most Active`) AS `Most Active`, sum(`Lapsing`) AS `Lapsing`, sum(`Invalid`) AS `Invalid`, sum(`Internal`) AS `Internal`, sum(`Accelerate`) AS `Accelerate`, sum(`Integrate`) AS `Integrate`, sum(`Efficiency`) AS `Efficiency`, sum(`Transitional`) AS `Transitional`, sum(`Agility`) AS `Agility`, sum(`Training`) AS `Training`, sum(`RHEL`) AS `RHEL`, sum(`Satellite`) AS `Satellite`, sum(`RHEV`) AS `RHEV`, sum(`Enterprise Application Platform`) AS `Enterprise Application Platform`, sum(`OpenStack`) AS `OpenStack`, sum(`CloudForms`) AS `CloudForms` FROM country_counts ';\nconst metroStatsBase = 'SELECT sum(count) AS count, MetroArea FROM country_counts';\nconst metroStatsBase2 = 'GROUP BY MetroArea ORDER BY count';\n\n\n// Given an object of filters, build a SQL Query\n//\n// @param filters Object with shape {\n//      filter1: [],\n//      filter2: [].\n//      ...\n//  }\n// @return String SQL Query to get counts\nconst getStats = (filters) => {\n    const query = getQueryPromise();\n    const whereClause = getWhereClause(filters);\n    const sqlQuery = `${sqlBase} ${whereClause};`;\n    const statsReturn = query(sqlQuery);\n    return getStatsFromSQLResponse(statsReturn.await());\n};\nconst sqlBase = 'SELECT sum(count) AS count, sum(`Email`) AS `Email`, sum(`Phone`) AS `Phone`, sum(`Mail`) AS `Mail`, sum(`NA`) AS `NA`, sum(`LATAM`) AS `LATAM`, sum(`EMEA`) AS `EMEA`, sum(`APAC`) AS `APAC`, sum(`IT Manager`) AS `IT Manager`, sum(`Other`) AS `Other`, sum(`Lead Developer`) AS `Lead Developer`, sum(`IT Executive`) AS `IT Executive`, sum(`Business Analyst`) AS `Business Analyst`, sum(`System Administrator`) AS `System Administrator`, sum(`Architect`) AS `Architect`, sum(`IT Decision Maker`) AS `IT Decision Maker`, sum(`Enterprise`) AS `Enterprise`, sum(`Mid-Market Enterprise`) AS `Mid-Market Enterprise`, sum(`Medium Business`) AS `Medium Business`, sum(`Small Business`) AS `Small Business`, sum(`Manufacturing`) AS `Manufacturing`, sum(`Finance`) AS `Finance`, sum(`Telecommunications`) AS `Telecommunications`, sum(`Media & Internet`) AS `Media & Internet`, sum(`Healthcare`) AS `Healthcare`, sum(`Education`) AS `Education`, sum(`Government`) AS `Government`, sum(`Inactive`) AS `Inactive`, sum(`Lapsed`) AS `Lapsed`, sum(`Most Active`) AS `Most Active`, sum(`Lapsing`) AS `Lapsing`, sum(`Invalid`) AS `Invalid`, sum(`Internal`) AS `Internal`, sum(`Accelerate`) AS `Accelerate`, sum(`Integrate`) AS `Integrate`, sum(`Efficiency`) AS `Efficiency`, sum(`Transitional`) AS `Transitional`, sum(`Agility`) AS `Agility`, sum(`Training`) AS `Training`, sum(`RHEL`) AS `RHEL`, sum(`Satellite`) AS `Satellite`, sum(`RHEV`) AS `RHEV`, sum(`Enterprise Application Platform`) AS `Enterprise Application Platform`, sum(`OpenStack`) AS `OpenStack`, sum(`CloudForms`) AS `CloudForms` FROM contact_counts ';\n\n\n// Return an array of Company names... top 10\nconst getCompanyStats = (filters) => {\n    const query = getQueryPromise();\n    const whereClause = getWhereClause(filters);\n    const companyQuery= `${sqlCompanyBase} ${whereClause} ${sqlCompanyBase2}; select count(distinct Companies) as companyCount from company_counts ${whereClause};`;\n    const companiesReturn = query(companyQuery).await();\n    return {\n        companies: companiesReturn[0].map(r => r.Companies),\n        companyCount: companiesReturn[1][0].companyCount\n    };\n};\nconst sqlCompanyBase= 'SELECT SUM(count) AS count, Companies FROM company_counts ';\nconst sqlCompanyBase2= 'GROUP BY Companies ORDER BY count DESC LIMIT 10';\n\n\n// When filters contains a 'Company' field, use this method to grab the full stats.\nconst getStatsWithCompany = (filters) => {\n    const query = getQueryPromise();\n    const whereClause = getWhereClause(filters);\n    const sqlQuery = `${fullStatsCompanyBase} ${whereClause}`;\n    const statsReturn = query(sqlQuery).await();\n    const stats = getStatsFromSQLResponse(statsReturn);\n    return { stats, companyCount: filters.Companies.length }\n};\nconst fullStatsCompanyBase = 'SELECT sum(count) AS count, sum(`Email`) AS `Email`, sum(`Phone`) AS `Phone`, sum(`Mail`) AS `Mail`, sum(`NA`) AS `NA`, sum(`LATAM`) AS `LATAM`, sum(`EMEA`) AS `EMEA`, sum(`APAC`) AS `APAC`, sum(`IT Manager`) AS `IT Manager`, sum(`Other`) AS `Other`, sum(`Lead Developer`) AS `Lead Developer`, sum(`IT Executive`) AS `IT Executive`, sum(`Business Analyst`) AS `Business Analyst`, sum(`System Administrator`) AS `System Administrator`, sum(`Architect`) AS `Architect`, sum(`IT Decision Maker`) AS `IT Decision Maker`, sum(`Enterprise`) AS `Enterprise`, sum(`Mid-Market Enterprise`) AS `Mid-Market Enterprise`, sum(`Medium Business`) AS `Medium Business`, sum(`Small Business`) AS `Small Business`, sum(`Manufacturing`) AS `Manufacturing`, sum(`Finance`) AS `Finance`, sum(`Telecommunications`) AS `Telecommunications`, sum(`Media & Internet`) AS `Media & Internet`, sum(`Healthcare`) AS `Healthcare`, sum(`Education`) AS `Education`, sum(`Government`) AS `Government`, sum(`Inactive`) AS `Inactive`, sum(`Lapsed`) AS `Lapsed`, sum(`Most Active`) AS `Most Active`, sum(`Lapsing`) AS `Lapsing`, sum(`Invalid`) AS `Invalid`, sum(`Internal`) AS `Internal`, sum(`Accelerate`) AS `Accelerate`, sum(`Integrate`) AS `Integrate`, sum(`Efficiency`) AS `Efficiency`, sum(`Transitional`) AS `Transitional`, sum(`Agility`) AS `Agility`, sum(`Training`) AS `Training`, sum(`RHEL`) AS `RHEL`, sum(`Satellite`) AS `Satellite`, sum(`RHEV`) AS `RHEV`, sum(`Enterprise Application Platform`) AS `Enterprise Application Platform`, sum(`OpenStack`) AS `OpenStack`, sum(`CloudForms`) AS `CloudForms` FROM company_counts ';\n\n\nconst getCountryStats = (filters) => {\n    const query = getQueryPromise();\n    const whereClause = getWhereClause(filters);\n    if (filters.Companies.length) {\n        console.log('Getting Countries from contact table');\n        console.log('NOT IMPLEMENTED');\n        //@TODO Get Countries from contacts Table\n    } else {\n\n        const sqlQuery = `${countryCountsSQLBase1} ${whereClause} ${countryCountsSQLBase2}`;\n        const countries = query(sqlQuery).await();\n        const retObj = {};\n        countries.forEach(({ Country, count }) => retObj[Country] = count);\n        return retObj;\n    }\n};\nconst countryCountsSQLBase1 = 'SELECT Country, sum(count) AS count FROM country_counts ';\nconst countryCountsSQLBase2 = 'GROUP BY Country ORDER BY count DESC';\n\n\nconst getStatsWithCountryAndCompany = (filters) => {\n    // get normal stats\n    const query = getQueryPromise();\n    const whereClause = getWhereClause(filters);\n    const sqlQuery = `${fullStatsCountryCompanyBase} ${whereClause}`;\n    console.log('***** SQL COMPANY *****', sqlQuery, '***** END SQL COMPANY *****');\n    const statsReturn = query(sqlQuery).await();\n    const stats = getStatsFromSQLResponse(statsReturn);\n    console.log(statsReturn);\n    // Also grab MetroAreas and Countries specifically\n    const metroQuery = `${metroStatsBaseCC} ${whereClause} ${metroStatsBaseCC2}; ${countryStatsBaseCC} ${whereClause} ${countryStatsBaseCC2};`;\n    console.log('Metro Query\\n', metroQuery);\n    const queryReturn = query(metroQuery).await();\n    const [metroReturn, countryReturn] = queryReturn;\n    const metroAreas = {};\n    const countries = {};\n    // This replace is stupid. We SHOULD do it in the DB.  But for now, this will allow us to store the values in Mongo\n    metroReturn.forEach(row => metroAreas[row.MetroArea.replace(/\\./g, '')] = row.count);\n    countryReturn.forEach(row => countries[row.Country] = row.count);\n\n    stats['Metro Areas'] = metroAreas;\n    stats['Countries'] = countries;\n    return stats;\n};\nconst fullStatsCountryCompanyBase = 'SELECT sum(count) AS count, sum(`Email`) AS `Email`, sum(`Phone`) AS `Phone`, sum(`Mail`) AS `Mail`, sum(`NA`) AS `NA`, sum(`LATAM`) AS `LATAM`, sum(`EMEA`) AS `EMEA`, sum(`APAC`) AS `APAC`, sum(`IT Manager`) AS `IT Manager`, sum(`Other`) AS `Other`, sum(`Lead Developer`) AS `Lead Developer`, sum(`IT Executive`) AS `IT Executive`, sum(`Business Analyst`) AS `Business Analyst`, sum(`System Administrator`) AS `System Administrator`, sum(`Architect`) AS `Architect`, sum(`IT Decision Maker`) AS `IT Decision Maker`, sum(`Enterprise`) AS `Enterprise`, sum(`Mid-Market Enterprise`) AS `Mid-Market Enterprise`, sum(`Medium Business`) AS `Medium Business`, sum(`Small Business`) AS `Small Business`, sum(`Manufacturing`) AS `Manufacturing`, sum(`Finance`) AS `Finance`, sum(`Telecommunications`) AS `Telecommunications`, sum(`Media & Internet`) AS `Media & Internet`, sum(`Healthcare`) AS `Healthcare`, sum(`Education`) AS `Education`, sum(`Government`) AS `Government`, sum(`Inactive`) AS `Inactive`, sum(`Lapsed`) AS `Lapsed`, sum(`Most Active`) AS `Most Active`, sum(`Lapsing`) AS `Lapsing`, sum(`Invalid`) AS `Invalid`, sum(`Internal`) AS `Internal`, sum(`Accelerate`) AS `Accelerate`, sum(`Integrate`) AS `Integrate`, sum(`Efficiency`) AS `Efficiency`, sum(`Transitional`) AS `Transitional`, sum(`Agility`) AS `Agility`, sum(`Training`) AS `Training`, sum(`RHEL`) AS `RHEL`, sum(`Satellite`) AS `Satellite`, sum(`RHEV`) AS `RHEV`, sum(`Enterprise Application Platform`) AS `Enterprise Application Platform`, sum(`OpenStack`) AS `OpenStack`, sum(`CloudForms`) AS `CloudForms` FROM country_company_counts ';\nconst metroStatsBaseCC = 'SELECT sum(count) AS count, MetroArea FROM country_company_counts';\nconst metroStatsBaseCC2 = 'GROUP BY MetroArea ORDER BY count';\nconst countryStatsBaseCC = 'SELECT sum(count) AS count, Country FROM country_company_counts';\nconst countryStatsBaseCC2 = 'GROUP BY Country ORDER BY count';\n\n\n\n//\n// WHERE CLAUSES HERE\n//\nconst countableFields = { 'Programs': true, 'Super Regions': true, 'Persona': true, 'Industry': true, 'Company Size': true, 'Engagement Status': true, 'Installed Technologies': true, 'Campaign Type': true };\nconst uncountableFields = { 'Countries': 'Country', 'Metro Areas': 'MetroArea', 'Companies': 'Companies' };\nconst getWhereClause = (filters) => {\n    const keys = Object.keys(filters).filter(k => filters[k].length);\n    const whereCountable = keys\n        .filter(k => countableFields[k])\n        .map(k => {\n            const thisArr = filters[k];\n            return `(${thisArr\n                .map(val => `\\`${val}\\`>0`)\n                .join(' OR ')})`;\n        });\n    const whereUncountable = keys\n        .filter(k => !countableFields[k])\n        .map(k => {\n            const thisArr = filters[k];\n            const name = uncountableFields[k] || k;\n            return `\\`${name}\\` IN (${thisArr.map(sqlstring.escape).join(', ')})`;\n        });\n    const where = whereCountable.concat(whereUncountable);\n    if (where.length) {\n        return `WHERE ${where.join(' AND ')}`;\n    }\n    return '';\n};\n\n/**\n *\n * @param SQLRes has shape\n     [{\n        NA: <Integer>,\n        LATAM: <Integer>,\n        EMEA: <Integer>,\n        APAC: <Integer>,\n        IT Manager: <Integer>,\n        Other: <Integer>,\n        Lead Developer: <Integer>,\n        IT Executive: <Integer>,\n        Business Analyst: <Integer>,\n        System Administrator: <Integer>,\n        Architect: <Integer>,\n        IT Decision Maker: <Integer>,\n        Enterprise: <Integer>,\n        Mid-Market Enterprise: <Integer>,\n        Medium Business: <Integer>,\n        Small Business: <Integer>,\n        Manufacturing: <Integer>,\n        Finance: <Integer>,\n        Telecommunications: <Integer>,\n        Media & Internet: <Integer>,\n        Healthcare: <Integer>,\n        Education: <Integer>,\n        Government: <Integer>,\n        Inactive: <Integer>,\n        Lapsed: <Integer>,\n        Most Active: <Integer>,\n        Lapsing: <Integer>,\n        Invalid: <Integer>,\n        Internal: <Integer>,\n        ModAppDev_Accelerate: <Integer>,\n        ModAppDev_Integrate: <Integer>,\n        ITWOB_Efficiency: <Integer>,\n        ITWOB_Transitional: <Integer>,\n        ITWOB_Agility: <Integer>,\n        Training: <Integer>,\n        RHEL: <Integer>,\n        Satellite: <Integer>,\n        RHEV: <Integer>,\n        Enterprise_Application_Platform: <Integer>,\n        OpenStack: <Integer>,\n        CloudForms: <Integer>\n    }]\n *\n * @return Object with shapeObject with shape\n {\n     Area1: {\n         Element1: 123,\n         Element2: 234,\n         ...\n     },\n     Area2: {\n         Element3: 345,\n         Element4: 456,\n         ...\n     },\n     ...\n}\n */\nconst getStatsFromSQLResponse = (SQLRes) => {\n    if (SQLRes.length !== 1) {\n        console.log('SQLRes should have one row', SQLRes);\n    }\n    const thisRes = SQLRes[0];\n    return {\n        contactCount: thisRes.count,\n        companyCount: thisRes.companies,\n        'Campaign Type': {\n            'Mail': thisRes['Mail'],\n            'Email': thisRes['Email'],\n            'Phone': thisRes['Phone']\n        },\n        'Super Regions': {\n            'NA': thisRes['NA'],\n            'LATAM': thisRes['LATAM'],\n            'EMEA': thisRes['EMEA'],\n            'APAC': thisRes['APAC']\n        },\n        Persona: {\n            'IT Manager': thisRes['IT Manager'],\n            'Other': thisRes['Other'],\n            'Lead Developer': thisRes['Lead Developer'],\n            'IT Executive': thisRes['IT Executive'],\n            'Business Analyst': thisRes['Business Analyst'],\n            'System Administrator': thisRes['System Administrator'],\n            'Architect': thisRes['Architect'],\n            'IT Decision Maker': thisRes['IT Decision Maker']\n        },\n        'Company Size': {\n            'Enterprise': thisRes['Enterprise'],\n            'Mid-Market Enterprise': thisRes['Mid-Market Enterprise'],\n            'Medium Business': thisRes['Medium Business'],\n            'Small Business': thisRes['Small Business']\n        },\n        Industry: {\n            'Manufacturing': thisRes['Manufacturing'],\n            'Finance': thisRes['Finance'],\n            'Telecommunications': thisRes['Telecommunications'],\n            'Media & Internet': thisRes['Media & Internet'],\n            'Healthcare': thisRes['Healthcare'],\n            'Education': thisRes['Education'],\n            'Government': thisRes['Government']\n        },\n        'Engagement Status': {\n            'Inactive': thisRes['Inactive'],\n            'Lapsed': thisRes['Lapsed'],\n            'Most Active': thisRes['Most Active'],\n            'Lapsing': thisRes['Lapsing'],\n            'Invalid': thisRes['Invalid'],\n            'Internal': thisRes['Internal']\n        },\n        Programs: {\n            'Accelerate': thisRes['Accelerate'],\n            'Integrate': thisRes['Integrate'],\n            'Efficiency': thisRes['Efficiency'],\n            'Transitional': thisRes['Transitional'],\n            'Agility': thisRes['Agility'],\n            'Training': thisRes['Training'],\n        },\n        'Installed Technologies': {\n            'RHEL': thisRes['RHEL'],\n            'Satellite': thisRes['Satellite'],\n            'RHEV': thisRes['RHEV'],\n            'Enterprise Application Platform': thisRes['Enterprise Application Platform'],\n            'OpenStack': thisRes['OpenStack'],\n            'CloudForms': thisRes['CloudForms']\n        }\n    };\n};\n","import { Meteor } from 'meteor/meteor';\nimport { getEloquaDataPromise, getEloquaDataResults, getOneEloquaPage, SEGMENTS_URL, CONTACTS_URL } from './getEloquaData.js';\nimport { Segments, EloquaLogs, Logs } from '../imports/collections.js';\nimport { Restivus } from 'meteor/nimble:restivus';\nimport { accumulateStats } from '../imports/helpers/stats.js';\n\n// Take an Eloqua response and insert the elements into the Segments collection\n// Use with getEloquaResponse\nconst insertSegments = Meteor.bindEnvironment( (body) => {\n  for (const obj of body.elements) {\n    Segments.upsert({ _id: obj.id }, { $set: { _id: obj.id, name: obj.name } });\n  }\n});\n\n\n// Called Daily to upsert new segment IDs\nexport const updateSegmentList = Meteor.bindEnvironment( () => {\n  getEloquaDataPromise(SEGMENTS_URL, insertSegments).await();\n});\n\n///////////////\n//\n// Meteor Startup code\n//\n///////////////\nMeteor.startup(() => {\n  if (Segments.find().count() === 0) { // Populate the server with data if it is currently empty.\n    console.log('Populating Segments');\n    Segments._ensureIndex({ name: 1 });\n    updateSegmentList();\n  }\n  const updateSegmentsEveryMorning = new Cron(updateSegmentList, { minute: 0, hour: 1 });\n});\n\n////////////////\n//\n// Meteor.Methods here\n//\n////////////////\nMeteor.methods({\n\n  //Get a segment's contacts and accumulate stats\n  getSegmentStatsByName(name) {\n    //Log lookup\n    Logs.insert({\n      type: 'Lookup',\n      input: name,\n      records: 1,\n      date: new Date()\n    });\n    //If we have the stats of the segment cached, return the existing results.\n    const segment = Segments.findOne({ name });\n    if (!segment) {\n      throw new Meteor.Error(`Could Not Find Segment Name: ${name}`);\n    }\n    if (segment.stats) {\n      return segment;\n    }\n    console.log(segment);\n    // Otherwise start to build and then return the stats\n    return Meteor.call('getSegmentStats', segment);\n  },\n\n  getSegmentStats(segment) {\n    const firstPage = getOneEloquaPage(segment['_id']).await();\n    segment.total = firstPage.total;\n    segment.stats = accumulateStats(firstPage.elements, 'eloqua', null);\n    if (firstPage.total > 1000) {\n      \n      const N = Math.ceil((firstPage.total - 1) / 1000);\n      const promArray = [];\n      for (let i = 2; i <= N; i++) {\n        promArray.push(getOneEloquaPage(segment['_id'], i).then((res) => accumulateStats(res.elements, 'eloqua', segment.stats)));\n      }\n      Promise.all(promArray).await();\n    }\n    // Update the Cache\n    segment.lastRefreshed = new Date();\n    segment.dataSample = firstPage.elements.slice(0,40).map(row => ({\n      first: row.C_FirstName,\n      last: row.C_LastName,\n      email: row.C_EmailAddress.replace(/.*@/, '***@')\n    }));\n    Segments.update({'_id': segment['_id']}, segment);\n    return segment;\n  }\n});\n\n\n\n\n/////////////\n//\n// Rest API starts here\n//\n/////////////\nconst RESTAPI = new Restivus({\n  apiPath: 'ws',\n  defaultHeaders: {\n    'Content-Type': 'application/json'\n  },\n  prettyJson: true,\n});\n\n// ADMIN UTILITY to refresh data\n//https://...com/ws/refresh\n// Use Eloqua Credentials in header\nRESTAPI.addRoute('refresh',{\n  post: function () {\n    if (this.request.headers.authorization === process.env.AUTHORIZATION){\n      console.log('Well Authorized, good sirs! Refreshing Data!');\n      updateSegmentList();\n      return {\n        statusCode: 200,\n        body: 'Success!'\n      };\n    } else{\n      console.log('/ws/refresh was activated but the authorization was incorrect');\n      console.log(this.request.headers.authorization);\n      console.log(process.env.AUTHORIZATION);\n      return { statusCode: 401 };\n    }\n  }\n});\n\n//http:/...com/ws/eloquaCallsInLastNDays/:days\nRESTAPI.addRoute('eloquaCallsInLastNDays/:days',{\n  get: function () {\n    let startDate = new Date();// Current Date\n    const days = this.urlParams.days;\n    startDate.setDate(startDate.getDate() - days); // Subtract N Days\n    startDate.setHours(0);  // Set the hour, minute and second components to 0\n    startDate.setMinutes(0);\n    startDate.setSeconds(0);\n    const count = EloquaLogs.find({ date: {$gte: startDate } }).map((doc) => Math.ceil(doc.numPagesToGet)).reduce((a, b) => a + b, 0);\n    return { days, count };\n  }\n});\n\n// http://...com/ws/PathCodes\n// http://...com/ws/PathCodes/:id\nRESTAPI.addCollection(Segments, {\n  excludedEndpoints: ['post', 'put', 'delete'],\n});\n\nRESTAPI.addCollection(EloquaLogs, {\n  excludedEndpoints: ['post', 'put', 'delete'],\n});\n\n// Get a report of contacts looked up\nRESTAPI.addRoute('usageReport', {\n  get: function () {\n    const oneDay = new Date();// Current Date\n    oneDay.setDate(oneDay.getDate() - 1); // Subtract N Days\n    const sevenDays = new Date();// Current Date\n    sevenDays.setDate(sevenDays.getDate() - 7); // Subtract N Days\n    const fourteenDays = new Date();// Current Date\n    fourteenDays.setDate(fourteenDays.getDate() - 14); // Subtract N Days\n    const thirtyDays = new Date();// Current Date\n    thirtyDays.setDate(thirtyDays.getDate() - 30); // Subtract N Days\n    const threeSixtyFiveDays = new Date();// Current Date\n    threeSixtyFiveDays.setDate(thirtyDays.getDate() - 365); // Subtract N Days\n    const REDUCE_SUM = (a, b) => a + b;\n    const lastDay = Logs.find({type: 'Lookup',date: {$gte: oneDay } });\n    const lastWeek = Logs.find({type: 'Lookup',date: {$gte: sevenDays } });\n    const lastTwoWeeks = Logs.find({type: 'Lookup',date: {$gte: fourteenDays } });\n    const lastMonth = Logs.find({type: 'Lookup',date: {$gte: thirtyDays } });\n    const lastYear = Logs.find({type: 'Lookup',date: {$gte: threeSixtyFiveDays } });\n    return {\n      contactsFound: {\n        lastDay: lastDay.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastWeek: lastWeek.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastTwoWeeks: lastTwoWeeks.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastMonth: lastMonth.map((doc) => doc.records).reduce(REDUCE_SUM, 0),\n        lastYear: lastYear.map((doc) => doc.records).reduce(REDUCE_SUM, 0)\n      },\n      uses: {\n        lastDay: lastDay.count(),\n        lastWeek: lastWeek.count(),\n        lastTwoWeeks: lastTwoWeeks.count(),\n        lastMonth: lastMonth.count(),\n        lastYear: lastYear.count()\n      }\n    }\n  }\n});\n\n","// 'use strict';\n//\n// const http = require('https');\n// const SEGMENT_LOOKUP = {\n//   host: 'secure.p01.eloqua.com',\n//   path: '/Api/rest/2.0/assets/contact/segments?depth=Complete',\n//   headers: {\n//     authorization: process.env.AUTHORIZATION\n//   }\n// };\n//\n// http.get(SEGMENT_LOOKUP, (res) => {\n//   let body = '';\n//   res.on('data', (chunk) => {\n//     console.log('Got a chunk!');\n//     body += chunk;\n//   });\n//   res.on('end', () => {\n//     const elementTypes = {};\n//     const fullResponse = JSON.parse(body);\n//     for (const obj of fullResponse.elements) {\n//       for (const obj2 of obj.elements) {\n//         if (obj2.type.includes('Filter')) {\n//           console.log('***************');\n//           console.log(JSON.stringify(obj2));\n//           console.log('+++++++++++++++');\n//           console.log(JSON.stringify(obj));\n//           console.log('***************');\n//         }\n//\n//       }\n//     }\n//     console.log(JSON.stringify(elementTypes));\n//   });\n// });\n// console.log('This may take a while');\n"]}